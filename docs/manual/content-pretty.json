[
  {
    "name": "about.md",
    "id": "/about.md",
    "url": "/about.html",
    "title": "About Daikoku",
    "content": "# About Daikoku\n\nTODO\n\n\n## Philosophy \n\nEvery OSS product build at <a href=\"https://www.maif.fr/\" target=\"_blank\">MAIF</a> like <a href=\"https://maif.github.io/otoroshi/\" target=\"_blank\">Otoroshi</a> or <a href=\"https://maif.github.io/izanami/\" target=\"_blank\">Izanami</a> follow a common philosophy. \n\n* the services or API provided should be technology agnostic.\n* http first: http is the right answer to the previous quote   \n* api First: The UI is just another client of the api. \n* secured: The services exposed need authentication for both humans or machines  \n* event based: The services should expose a way to get notified of what happened inside. \n"
  },
  {
    "name": "1-tenants.md",
    "id": "/adminusage/1-tenants.md",
    "url": "/adminusage/1-tenants.html",
    "title": "Managing tenants",
    "content": "# Managing tenants\n\nGo to `settings/Organizations settings`\n\n@@@ div { .centered-img }\n<img src=\"../img/organisation_settings.png\" />\n@@@\n\nAnd you should see the list of existing `tenants`\n\n@@@ div { .centered-img }\n<img src=\"../img/tenant_list.png\" />\n@@@\n\n## Create a tenant\n\nTo create a new tenant, just click to the `create a new tenant` button\n\n### common informations\n\nmodify the name and the domain name of the tenant.\nIt's possible to set the default language of the tenant.\n\n### Tenant style\n\nTenants could be customized in Daikoku.\nLogo, title, description can be changed.\nThe css can be customized with some css code or js code, with overwriting css variables or with a css/js file.\n\n### Authentication\n\nA tenant can be be private or public. In the last case, just public api can be accessed by unauthenticated users.\nAuthentication can be set by choosen Local auth. or a tiers auth. like LDAP, OAuth2 or Otoroshi.\nThe user session duration can be set here, by default it last 24h.\n\n### Audit trail\n\nThe settings for the output of the audit trail can be set on this page.\nThe output of it, in addition to writing in database, can be an elsatic, a kafka or a webhook.\n\n### Alerting\nThe email adresses to report some Daikoku alert.\n\n### Mailer\nThe mailer type, by default just the standard output. Mailjet can be configure.\n\n### Bucket\nAn object storage can be set to store tenant and team assets.\n\n### Unlogged home description\nThe unlogged home description is the first content shown to user for private tenant, before the login page.\nIt can be also enable for public tenant."
  },
  {
    "name": "2-users.md",
    "id": "/adminusage/2-users.md",
    "url": "/adminusage/2-users.html",
    "title": "Managing users",
    "content": "# Managing users\n\nUsers in Daikoku are cross tenants. As Daikoku admin, you are responsible for managing users.\n\n## Admin status\n\nNothing's easier to give or remove admin status to another user. Just hover the user's avatar and click on the `shield` button.\nIt's impossible to remove oneself the admin status.\n\n## Create a new user\n\nTo create a new user, just click on the `Create new user` button. \nYou will have some information to inform :\n\n* The user's name\n* An email adress\n* Possibly an avatar. It could be an URl or an assets from the object manager\n* Activate / deactivate the admin status\n* A password\n* A personal token\n* The tenant accessible by the user\n* Metadatas\n\nTo finalize ther creation, click on the `Create` button.\n\n## Remove User\n\nTo delete a user, just hover the avatar and click on `trash` button. Finaly, confirm the command.\n\n## Impersonate user\n\nDaikoku allow to impersonate a user. Just hover the avatar and click on `ninja` button."
  },
  {
    "name": "3-sessions.md",
    "id": "/adminusage/3-sessions.md",
    "url": "/adminusage/3-sessions.html",
    "title": "Managing sessions",
    "content": "# Managing sessions\n\nWith Daikoku you can manage sessions of connected users and you can discard sessions whenever you want. Session last 24h by default and you can customize them with tenant authentication information @ref:[tenant config.](./1-tenants.md)\n\n## Admin. sessions\n\nTo see last current admin session on Daikoku from the UI, go to `settings (avatar icon) / Organizations settings` and then `User sessions`. Here you can discard individual sessions or all sessions at once using `trash` button and `delete all sessions` buttons.\n"
  },
  {
    "name": "4-importexport.md",
    "id": "/adminusage/4-importexport.md",
    "url": "/adminusage/4-importexport.html",
    "title": "Import and export",
    "content": "# Import and export\n\nWith Otoroshi you can easily save the current state of the proxy and restore it later. Go to `settings (avatar icon) / Organizations settings` and then `import/export`.\n\n## Full export\n\nClick on the `download state` button.\n\nYour browser will start to download a ndjson file containing the internal state of your Daikoku instance.\n\n## Full import\n\nIf you want to restore an export, Go to `settings (avatar icon) / Organizations settings` and then `import/export`.  Click on the `import state` button and choose your ndjson export file.\n"
  },
  {
    "name": "index.md",
    "id": "/adminusage/index.md",
    "url": "/adminusage/index.html",
    "title": "Using Daikoku as Daikoku admin",
    "content": "# Using Daikoku as Daikoku admin\n\nNow we will see how to use Daikoku as Daikoku admin.\n\n@@@ index\n\n* [managing tenants](./1-tenants.md)\n* [managing users](./2-users.md)\n* [managing sessions](./3-sessions.md)\n* [import and export](./4-importexport.md)\n\n@@@\n"
  },
  {
    "name": "apis.md",
    "id": "/apis.md",
    "url": "/apis.html",
    "title": "Admin REST API",
    "content": "# Admin REST API\nDaikoku provides a fully featured REST admin API to perform almost every operation possible in the Daikoku dashboard.\n\n## Swagger descriptor\n\nThe Daikoku admin API is described using OpenAPI format and is available at :\n\nhttps://maif.github.io/daikoku/manual/code/swagger.json\n\n## Swagger documentation\n\nYou can read the OpenAPI descriptor in a more human friendly fashion using `Swagger UI`. The swagger UI documentation of the Daikoku admin API is available at :\n\nhttps://maif.github.io/daikoku/swagger-ui/index.html\n\nEvery Daikoku instance provides its own embedded OpenAPI descriptor at :\n\nhttp://daikoku.oto.tools:8080/api/swagger/ui\n\nYou can also read the swagger UI documentation of the Daikoku admin API below :\n\n@@@ div { .swagger-frame }\n\n\n@@@"
  },
  {
    "name": "archi.md",
    "id": "/archi.md",
    "url": "/archi.html",
    "title": "Architecture",
    "content": "# Architecture\n\nTODO\n\n\n@@@ div { .centered-img }\n<img src=\"./img/architecture.png\" />\n@@@\n"
  },
  {
    "name": "1-subscribe.md",
    "id": "/consumerusage/1-subscribe.md",
    "url": "/consumerusage/1-subscribe.html",
    "title": "Subscribe to an api",
    "content": "# Subscribe to an api\n\n## choose a plan\nFirst of all, you've got to choose an api to subscribe. In the information page of the api, select the `Plans` tab.\nhere are presented the differents pricing plan of the api (if team decides to present multiple plans).\nJust click the `subscribe` button. If you are member of several teams, please choose teams to make subscription and click the `subscribe` button.\n\nIf the subscription is automatic, a green message appears to inform you that the subscription is successful.\nIf the subscription is manual, the owner team has been notified of your request. please wait a moment.\n"
  },
  {
    "name": "2-apikeys.md",
    "id": "/consumerusage/2-apikeys.md",
    "url": "/consumerusage/2-apikeys.html",
    "title": "Manage apikeys",
    "content": "# Manage apikeys\nIn the backoffice team, click on the `Team apikeys` entry, on the left.\nAnd you should see the list of existing `apikeys`\n\n## View apikeys\nOn the right of the api line, click on the `Api Keys` button.\nAll subscribed plan for the api are displayed. To copy credential, click on the `copy` button at the bottom right of the component.\n\nApikey usage statistics are avalaible after clicking on the `stats` button.\nStats are avalaible for `today`, `yesterday`, `last week`, `last month` or `the billing period`.\nYou can see a graph to see usage or some global informations likes hit count, average duration or avergae overhead.\n\n## View global statistics\nAfter clicking on the `see stats` button, global statistics are displayed.\nIt's a view of your usage by apis, split by apikeys."
  },
  {
    "name": "3-billing.md",
    "id": "/consumerusage/3-billing.md",
    "url": "/consumerusage/3-billing.html",
    "title": "Team billing",
    "content": "# Team billing\n\nTeam billing page is basically the same view than [Team revenus](../producerusage/4-revenus.md) with az consumer point of view.\n"
  },
  {
    "name": "index.md",
    "id": "/consumerusage/index.md",
    "url": "/consumerusage/index.html",
    "title": "Using Daikoku as api consumer",
    "content": "# Using Daikoku as api consumer\n\nNow we will see how to use Daikoku for basic tasks that will be useful for your day to day work with Daikoku as consumer.\n\n\n@@@ index\n\n* [subscribe api](./1-subscribe.md)\n* [managing apikeys](./2-apikeys.md)\n* [team billing](./3-billing.md)\n\n@@@\n"
  },
  {
    "name": "index.md",
    "id": "/deploy/index.md",
    "url": "/deploy/index.html",
    "title": "Deploy to production",
    "content": "# Deploy to production\n\nNow it's time to deploy Daikoku in production, in this chapter we will see what kind of things you can do.\n"
  },
  {
    "name": "configfile.md",
    "id": "/firstrun/configfile.md",
    "url": "/firstrun/configfile.html",
    "title": "Config. with files",
    "content": "# Config. with files\n\nThere is a lot of things you can configure in Daikoku. By default, Daikoku provides a configuration that should be enough for testing purpose. But you'll likely need to update this configuration when you'll need to move into production.\n\nIn this page, any configuration property can be set at runtime using a `-D` flag when launching Daikoku like\n\n```sh\njava -Dhttp.port=8080 -jar daikoku.jar\n```\n\nor\n\n```sh\n./bin/daikoku -Dhttp.port=8080\n```\n\n## Common configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.mode`|String|\"prod\"| Daikoku running mode. Can be dev or prod |\n|`daikoku.exposedOn`|String|http.port| the http port exposed by Daikoku  |\n|`daikoku.singingkey`|String|\"secret\"| the secret used for signing the JWT token |\n|`daikoku.tenants.provider` | string | \"local\" | the way to get the tenant to display. it can be local, header or hostname|\n|`daikoku.exposition.provider` | string | \"none\" | Activate the otoroshi exchange protocol |\n|`daikoku.snowflake.seed` | number | 0 | this number will is used to generate unique ids across the cluster. Each Otorshi instance must have a unique seed. |\n\n## Admin api\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.api.type`|String|\"local\"| the provider of apikey for admin apis. it can be local or otoroshi |\n|`daikoku.api.key`|String|\"secret\"| the local apikey of admin apis |\n|`daikoku.api.headerName`|String|\"Otoroshi-Claim\"||\n|`daikoku.api.headerSecret`|String|\"secret\"||\n\n## Otoroshi settings\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.exposition.otoroshi.stateHeaderName` | string | \"Otoroshi-State\" | the otoroshi exchange protocol header name |\n|`daikoku.exposition.otoroshi.stateRespHeaderName` | string | \"Otoroshi-State-resp\" | the otoroshi exchange protocol response header name |\n|`daikoku.otoroshi.groups.namePrefix` | string |  | value to filter otoroshi groups based on the group name |\n|`daikoku.otoroshi.groups.idPrefix` | string | | value to filter otoroshi groups based on the group d |\n|`daikoku.otoroshi.sync.master` | boolean | false | value to define if the instance is the master to sync otoroshi datas |\n|`daikoku.otoroshi.sync.key` | string | \"secret\" | sync key to sync otoroshi |\n|`daikoku.otoroshi.sync.cron` | boolean | false | value to define if otorshi values are sync by cron |\n|`daikoku.otoroshi.sync.instance` | number |  | Daikoku instance number |\n\n## Daikoku init\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.init.host`|String|\"localhost\"|  |\n|`daikoku.init.admin.name`|String|\"Super admin\"| Daikoku default admin name |\n|`daikoku.init.admin.email`|String|\"admin@daikoku.io\"| Daikoku default admin email |\n|`daikoku.init.admin.password`|String||Daikoku default admin password |\n|`daikoku.init.data.from` | string |  | a file path or a URL to a Daikoku export file. If the datastore is empty on startup, this file will be used to import data to the empty DB  |\n\n\n## DB configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`mongodb.uri` | string | \"mongodb://localhost:27017/daikoku\" | the uri to mongdb datastore |\n\n## Play specific configuration\n\nAs Daikoku is a [Play app](https://www.playframework.com/), you should take a look at [Play configuration documentation](https://www.playframework.com/documentation/2.6.x/Configuration) to tune its internal configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n| `http.port` | number | 8080 | the http port used by Daikoku. You can use 'disabled' as value if you don't want to use http |\n| `https.port` | number | disabled | the https port used by Daikoku. You can use 'disabled' as value if you don't want to use https |\n| `play.http.secret.key` | string | \"secret\" | the secret used to sign Daikoku session cookie |\n| `play.http.session.secure` | boolean | false | whether or not the Daikoku backoffice session will be served over https only |\n| `play.http.session.httpOnly` | boolean | true | whether or not the Daikoku backoffice session will be accessible from Javascript |\n| `play.http.session.maxAge` | number | 259200000 | the number of seconds before Daikoku backoffice session expired |\n| `play.http.session.domain` | string | null | the domain on which the Daikoku backoffice session is authorized |\n| `play.http.session.cookieName` |  string | \"daikoku-session\" | the name of the Daikoku backoffice session |\n| `server.https.keyStore.path` |  string |  | the path to the keyStore containing the private key and certificate, if not provided generates a keystore for you |\n| `server.https.keyStore.type` |  string | \"JKS\" | the keyStore type |\n| `server.https.keyStore.password` |  string | \"\" | the password |\n| `server.https.keyStore.algorithm` |  string |  | The keyStore algorithm, defaults to the platforms default algorithm |\n\n\n\n## More config. options\n\nSee https://github.com/MAIF/daikoku/blob/master/daikoku/conf/base.conf and https://github.com/MAIF/daikoku/blob/master/daikoku/conf/application.conf\n\nif you want to configure https on your Daikoku server, just read [PlayFramework documentation about it](https://www.playframework.com/documentation/2.6.x/ConfiguringHttps)\n\n## Example of configuration file\n\n```conf\ndaikoku {\n\n  mode = \"prod\"\n  signingKey = \"secret\"\n\n  exposedOn = ${http.port}\n\n  api {\n    type = \"local\"\n    key = \"secret\"\n    headerName = \"Otoroshi-Claim\"\n    headerSecret = \"secret\"\n  }\n\n  init {\n    host = \"localhost\"\n    admin {\n      name = \"Super admin\"\n      email = \"admin@daikoku.io\"\n      password = \"password\"\n    }\n    data {\n      from = \"/config/daikoku.ndjson\"\n      headers = {}\n    }\n  }\n\n  snowflake {\n    seed = 0\n  }\n\n  tenants {\n    provider = \"local\"\n  }\n\n  exposition {\n    provider = \"none\"\n    otoroshi {\n      stateHeaderName = \"Otoroshi-State\"\n      stateRespHeaderName = \"Otoroshi-State-Resp\"\n    }\n  }\n\n  otoroshi {\n    groups {\n      namePrefix = \"daikoku\"\n    }\n    sync {\n      interval = 3600000\n      master = false\n      key = \"secret\"\n      cron = true\n      instance = 0\n    }\n  }\n\n  stats {\n    sync {\n      interval = 3600000\n      cron = true\n    }\n    call {\n      interval = 600000\n    }\n  }\n}\n\nmongodb {\n  uri = \"mongodb://localhost:27017/daikoku\"\n}\n\n\nhttp.port = 8080\nhttps.port = disabled\n\nplay {\n  application.loader = \"fr.maif.otoroshi.daikoku.DaikokuLoader\"\n  modules {}\n  filters {\n    enabled = []\n  }\n  http {\n    filters = play.api.http.NoHttpFilters\n    secret {\n      key = \"secret\"\n    }\n    session = {\n      cookieName = \"daikoku-session\"\n      secure = false\n      maxAge = 259200000\n      httpOnly = true\n      sameSite = \"lax\"\n      domain = null\n      path = ${play.http.context}\n      jwt {\n        signatureAlgorithm = \"HS256\"\n        expiresAfter = ${play.http.session.maxAge}\n        clockSkew = 5 minutes\n        dataClaim = \"data\"\n      }\n    }\n  }\n  server {\n    akka {\n      requestTimeout = 60s\n    }\n    http {\n      port = ${http.port}\n      idleTimeout = 60s\n    }\n  }\n}\n\n```\n"
  },
  {
    "name": "datastore.md",
    "id": "/firstrun/datastore.md",
    "url": "/firstrun/datastore.html",
    "title": "Choose your audit trail datastore",
    "content": "# Choose your audit trail datastore\n\nRight now, Daikoku supports multiple datastore for audit trail.\n\nYou can choose one datastore over another depending on your use case.\n\nAvailable datastores for audit trail are the following :\n\n* mongoDB (by default)\n* elastic\n* kafka\n* webhook\n\nyou can manage it in the tenant settings page.\n"
  },
  {
    "name": "env.md",
    "id": "/firstrun/env.md",
    "url": "/firstrun/env.html",
    "title": "Config. with ENVs",
    "content": "# Config. with ENVs\n\nNow that you know @ref:[how to configure Daikoku with the config. file](./configfile.md) every property in the following block can be overriden by an environment variable (an env. variable is written like `${?ENV_VARIABLE}`).\n\n```\nmode = ${?DAIKOKU_MODE}\nsigningKey = ${?DAIKOKU_SIGNING_KEY}\nexposedOn = ${?DAIKOKU_EXPOSED_ON}\nype = ${?DAIKOKU_API_TYPE}\nkey = ${?DAIKOKU_API_KEY}\nheaderName = ${?DAIKOKU_API_HEADERNAME}\nheaderSecret = ${?DAIKOKU_API_HEADERSECRET}\nhost = ${?DAIKOKU_INIT_HOST}\nname = ${?DAIKOKU_INIT_ADMIN_NAME}\nemail = ${?DAIKOKU_INIT_ADMIN_EMAIL}\npassword = ${?DAIKOKU_INIT_ADMIN_PASSWORD}\nfrom = ${?DAIKOKU_INIT_DATA_FROM}\nseed = ${?INSTANCE_NUMBER}\nprovider = ${?DAIKOKU_TENANT_PROVIDER}\nprovider = ${?DAIKOKU_EXPOSITION_PROVIDER}\nstateHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_HEADER_NAME}\nstateRespHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_RESP_HEADER_NAME}\nnamePrefix = ${?DAIKOKU_OTOROSHI_GROUPS_NAME_PREFIX}\nidPrefix = ${?DAIKOKU_OTOROSHI_GROUPS_ID_PREFIX}\nmaster = ${?DAIKOKU_OTOROSHI_SYNC_MASTER}\nkey = ${?DAIKOKU_OTOROSHI_SYNC_KEY}\ncron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}\ninstance = ${?INSTANCE_NUMBER}\ncron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}\nuri = ${?MONGODB_URI}\nuri = ${?MONGODB_ADDON_URI}\nhttp.port = ${?PORT}\nhttps.port = ${?HTTPS_PORT}\nkey = ${?PLAY_CRYPTO_SECRET}\ncookieName = ${?DAIKOKU_SESSION_NAME}\nsecure = ${?DAIKOKU_SESSION_SECURE}\nmaxAge = ${?DAIKOKU_SESSION_MAXAGE}\nhttpOnly = ${?DAIKOKU_SESSION_HTTPONLY}\nsameSite = ${?DAIKOKU_SESSION_SAMESITE}\ndomain = ${?DAIKOKU_SESSION_DOMAIN}\npath=${?HTTPS_KEYSTORE_PATH}\ntype=${?HTTPS_KEYSTORE_TYPE}\npassword=${?HTTPS_KEYSTORE_PASSWORD}\nalgorithm=${?HTTPS_KEYSTORE_ALGO}\n```\n"
  },
  {
    "name": "index.md",
    "id": "/firstrun/index.md",
    "url": "/firstrun/index.html",
    "title": "First run",
    "content": "# First run\n\nNow that you have your own distro of Daikoku, it's time to run it. \n\nBut before doing so, you'll have to make some choices about some essential stuff in order to have your own customized version of Daikoku.\n\nLet's start with the datastore\n\n\n@@@ index\n\n* [choose an audit_trail_datastore](./datastore.md)\n* [use custom config file](./configfile.md)\n* [use ENV](./env.md)\n* [initial state](./initialstate.md)\n* [Run](./run.md)\n\n@@@"
  },
  {
    "name": "initialstate.md",
    "id": "/firstrun/initialstate.md",
    "url": "/firstrun/initialstate.html",
    "title": "Import initial state",
    "content": "# Import initial state\n\nNow you are almost ready to run Daikoku for the first time, but maybe you want to import data from previous Daikoku installation in your current datastore.\n\nTo do that, you need to add the `app.init.data.from` setting to the Daikoku configuration (of `$DAIKOKU_INIT_DATA_FROM` env).\n\nIt can be a file path or a URL to the ndjson file.\n"
  },
  {
    "name": "run.md",
    "id": "/firstrun/run.md",
    "url": "/firstrun/run.html",
    "title": "Run Daikoku",
    "content": "# Run Daikoku\n\nNow you are ready to run Daikoku. You can run the following command with some tweaks depending on the way you want to configure Daikoku. If you want to pass a custom configuration file, use the `-Dconfig.file=/path/to/file.conf` flag in the following commands.\n\n## From .zip file\n\n```sh\nunzip daikoku-dist.zip\ncd daikoku-vx.x.x\n./bin/daikoku\n```\n\n## From .jar file\n\nFor Java 11\n\n```sh\njava -jar daikoku.jar\n```\n\n## From docker\n\n```sh\ndocker run -p \"8080:8080\" maif/daikoku:1.0.0-rc1\n```\n\nYou can also pass useful args like :\n\n```\ndocker run -p \"8080:8080\" daikoku -Dconfig.file=/usr/app/daikoku/conf/daikoku.conf -Dlogger.file=/usr/app/daikoku/conf/daikoku.xml\n```\n\nIf you want to provide your own config file, you can read @ref:[the documentation about config files](../firstrun/configfile.md).\n\nYou can also provide some ENV variable using the `--env` flag to customize your Daikoku instance.\n\nThe list of possible env variables is available @ref:[here](../firstrun/env.md).\n\nYou can use a volume to provide configuration like :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/conf\" maif/daikoku:1.0.0-rc1\n```\n\nYou can also use a volume if you choose to use exports files :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/imports\" maif/daikoku :1.0.0-rc1 -Ddaikoku.init.data.from=/usr/app/daikoku/imports/export.ndjson\n```\n\n## Run examples\n\n```sh\n$ java \\\n  -Xms2G \\\n  -Xmx8G \\\n  -Dhttp.port=8080 \\\n  -Ddaikoku.init.data.from=/home/user/daikoku.ndjson \\\n  -Dconfig.file=/home/user/daikoku.conf \\\n  -jar ./daikoku.jar\n\n[info] play.api.Play - Application started (Prod)\n[warn] daikokuEnv - Main dataStore seems to be empty, importing from /home/user/daikoku.conf ...\n[warn] daikokuEnv - Importing from: /home/user/daikoku.ndjson\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:8080\n```\n\nIf you choose to start Daikoku without importing existing data, Daikoku will create a new admin user and print the login details in the log.\n\n```sh\n$ java \\\n  -Xms2G \\\n  -Xmx8G \\\n  -Dhttp.port=8080 \\\n  -jar daikoku.jar\n\n[info] play.api.Play - Application started (Prod)\n[warn] DaikokuEnv - Main dataStore seems to be empty, generating initial data ...\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0.0.0.0:8080\n[warn] DaikokuEnv -\n[warn] DaikokuEnv - You can log in with admin@daikoku.io / wr4pHmVRArCGhHoteMfwqV6UuvQh6J2z\n[warn] DaikokuEnv -\n[warn] DaikokuEnv - Please avoid using the default tenant for anything else than configuring Daikoku\n[warn] DaikokuEnv -\n\n```\n"
  },
  {
    "name": "frombinaries.md",
    "id": "/getdaikoku/frombinaries.md",
    "url": "/getdaikoku/frombinaries.html",
    "title": "From binaries",
    "content": "# From binaries\n\nIf you want to download the last version of Daikoku and its CLI, you can grab them from the release page of the Daikoku github page :\n\nGo to https://github.com/MAIF/daikoku/releases and get the last version of the `daikoku-dist.zip` file or `daikoku.jar` file\n"
  },
  {
    "name": "fromdocker.md",
    "id": "/getdaikoku/fromdocker.md",
    "url": "/getdaikoku/fromdocker.html",
    "title": "From docker",
    "content": "# From docker\n\nIf you're a Docker aficionado, Daikoku is provided as a Docker image that your can pull directly from Official repos.\n\nfirst, fetch the last Docker image of Daikoku :\n\n```sh\ndocker pull maif/daikoku:1.0.0-rc1\n# or \ndocker pull maif/daikoku:latest\n```"
  },
  {
    "name": "fromsources.md",
    "id": "/getdaikoku/fromsources.md",
    "url": "/getdaikoku/fromsources.html",
    "title": "From sources",
    "content": "# From sources\n\nto build Daikoku from sources, you need the following tools :\n\n* git\n* JDK 11\n* SBT\n* node\n* yarn\n\nOnce you've installed all those tools, go to the [Daikoku github page](https://github.com/MAIF/daikoku) and clone the sources :\n\n```sh\ngit clone https://github.com/MAIF/daikoku.git --depth=1\n```\n\nthen you need to run the `build.sh` script to build the documentation, the React UI and the server :\n\n```sh\nsh ./scripts/build.sh\n```\n\nand that's all, you can grab your Daikoku package at `daikoku/target/scala-2.12/daikoku` or `daikoku/target/universal/`.\n\nFor those who want to build only parts of Daikoku, read the following.\n\n## Build the documentation only\n\nGo to the `documentation` folder and run :\n\n```sh\nsbt ';clean;paradox'\n```\n\nThe documentation is located at `documentation/target/paradox/site/main/`\n\n## Build the React UI\n\nGo to the `daikoku/javascript` folder and run :\n\n```sh\nyarn install\nyarn webpack:build\n```\n\nYou will find the JS bundle at `daikoku/public/react-app/daikoku.js`.\n\n## Build the Daikoku server\n\nGo to the `daikoku` folder and run :\n\n```sh\nsbt ';clean;compile;dist;assembly'\n```\n\nYou will find your Daikoku package at `daikoku/target/scala-2.12/daikoku` or `daikoku/target/universal/`.\n"
  },
  {
    "name": "index.md",
    "id": "/getdaikoku/index.md",
    "url": "/getdaikoku/index.html",
    "title": "Get Daikoku",
    "content": "# Get Daikoku\n\nThere are several ways to get Daikoku to run it on your system.\n\nLet's start with a good old build from sources :)\n\n@@@ index\n\n* [from sources](./fromsources.md)\n* [from binaries](./frombinaries.md)\n* [from docker](./fromdocker.md)\n\n@@@"
  },
  {
    "name": "index.md",
    "id": "/index.md",
    "url": "/index.html",
    "title": "Daikoku",
    "content": "# Daikoku\n\n**Daikoku** is the missing developer portal for Otoroshi written in <a href=\"https://www.scala-lang.org/\" target=\"_blank\">Scala</a> and developped by the <a href=\"https://maif.github.io\" target=\"_blank\">MAIF OSS</a> team.\n\n\n> *In Japan, <a href=\"https://en.wikipedia.org/wiki/File:Daikoku.jpg\" target=\"blank\">Daikokuten</a> (大黒天), the god of great darkness or blackness, or the god of five cereals, is one of the Seven Lucky Gods (Fukujin). Daikokuten evolved from the Buddhist form of the Indian deity Shiva intertwined with the Shinto god Ōkuninushi. The name is the Japanese equivalent of Mahākāla, the Hindu name for Shiva.*\n\n@@@ div { .centered-img }\n[![Build Status](https://travis-ci.org/MAIF/daikoku.svg?branch=master)](https://travis-ci.org/MAIF/daikoku) [![Join the chat at https://gitter.im/MAIF/daikoku](https://badges.gitter.im/MAIF/daikoku.svg)](https://gitter.im/MAIF/daikoku?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [ ![Download](https://img.shields.io/github/release/MAIF/daikoku.svg) ](https://github.com/MAIF/daikoku/releases/download/v1.0.0/daikoku.jar)\n@@@\n\n@@@ div { .centered-img }\n<img src=\"https://github.com/MAIF/daikoku/raw/master/resources/daikoku-logo.png\" width=\"300\"></img>\n@@@\n\n## Installation\n\nYou can download the latest build of Daikoku as a [fat jar](https://github.com/MAIF/daikoku/releases/download/v1.0.0/daikoku.jar), as a [zip package](https://github.com/MAIF/daikoku/releases/download/v1.0.0/daikoku-dist.zip) \n\nYou can install and run Otoroshi with this little bash snippet\n\n```sh\ncurl -L -o daikoku.jar 'https://github.com/MAIF/daikoku/releases/download/v1.0.0./daikoku.jar'\njava -jar daikoku.jar\n```\n\nor using docker\n\n```sh\ndocker run -p \"8080:8080\" maif/daikoku:1.0.0\n```\n\nnow open your browser to <a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a>, **log in with the credential generated in the logs** and explore by yourself\n\n## Documentation\n\n\n## Discussion\n\nJoin the [Daikoku](https://gitter.im/MAIF/daikoku) channel on the [MAIF Gitter](https://gitter.im/MAIF)\n\n## Sources\n\nThe sources of Daikoku are available on [Github](https://github.com/MAIF/daikoku).\n\n## Logo\n\nYou can find the official Daikoku logo [on GitHub](https://github.com/MAIF/daikoku/blob/master/resources/daikoku-logo.png). The Daikoku logo has been created by François Galioto ([@fgalioto](https://twitter.com/fgalioto))\n\n## Changelog\n\nEvery release, along with the migration instructions, is documented on the [Github Releases](https://github.com/MAIF/daikoku/releases) page.\n\n## Patrons\n\nThe work on Daikoku was funded by <a href=\"https://www.maif.fr/\" target=\"_blank\">MAIF</a> with the help of the community.\n\n## Licence\n\nDaikoku is Open Source and available under the [Apache 2 License](https://opensource.org/licenses/Apache-2.0)\n\n@@@ index\n\n* [About Daikoku](about.md)\n* [Architecture](archi.md)\n* [Quickstart](quickstart.md)\n* [Get Daikoku](getdaikoku/index.md)\n* [First run](firstrun/index.md)\n* [Setup](setup/index.md)\n* [Using Daikoku as admin](adminusage/index.md)\n* [Using Daikoku as tenant admin](tenantusage/index.md)\n* [Using Daikoku as api producer](producerusage/index.md)\n* [Using Daikoku as api consumer](consumerusage/index.md)\n* [Integrations API](integrations.md)\n* [Admin REST API](apis.md)\n* [Deploy to production](deploy/index.md)\n\n@@@\n"
  },
  {
    "name": "integrations.md",
    "id": "/integrations.md",
    "url": "/integrations.html",
    "title": "#Integrations API",
    "content": "#Integrations API\nDaikoku provides some integrations API to get some values as JSON.\nTo have more informations, all integration apis are detailed on the [swagger documentation](./apis.md)."
  },
  {
    "name": "1-apis.md",
    "id": "/producerusage/1-apis.md",
    "url": "/producerusage/1-apis.html",
    "title": "#Managing Apis",
    "content": "#Managing Apis\n\n## Create a new api\nTo create a new api, you can click on the `+ api` button in the catalog page or the `Create new api` button in the Team apis page in your back offices's team.\nAfter clicking on the button localized in the catalog page, you need to choose a team which is the owner.\n\n### Api informations\nAn api needs a name to be created.\nThen, you could add a small description, displayed in the catalog page.\nApi can be published or not. In the latter case, you can consider it as a draft.\n\n### Versions and tags\nhere are just pure information like current version of the api and supported versions.\nTags and categories are array of item, mostly used to filter apis.\n\n### Visibililty and subscription\nVisibility can be:\n\n* public: everybody could see the complete api\n* public with authorization: everybody could see just a part of the api, in the catalog page (name, tags, categories and small desc.). Everybody could ask an access to see more to an admin of owner team.\n* private: Just authorized teams have access to the api.\n\nSubscription can be: \n\n* Automatic: all api subscriptions will be accepted automatically\n* Manual: api subscriptions will require an acceptance by a team admin\n\n\n### Authorizations\nThe teams which have accessed to the api, in the case of visibility is private.\n\n### Description\nThe api description.\nBasically it could be written in markdown.\nThe description can be set from team asset.\n\n### Plans\nAn api need plan to be subscribed.\nPlan need name, eventually description and mostly an [otoroshi instance](../tenantusage/1-otoroshi.md)\nIt's possible to allow multiple apikey for a plan for teams.\n\nIt's important to choose a type of plan need to be choosen :\n\n* free without quotas: a plan with unlimited number of calls per day and per month\n* free with quotas: a plan with limited number of calls per day and per month. Quotas set by default but can be overwritten.\n* quotas with limit: a priced plan with limited number of calls per day and per month. Quotas set by default but can be overwritten. A fixed cost by month can be set. \n* quotas without limit: a priced plan with unlimited number of calls per day and per month. Quotas set by default but can be overwritten. A fixed cost by month can be set. The cost per additional requests can be set.\n* pay per use: a plan priced on usage. A fixed cost by month can be set. The cost per additional requests can be set.\n\n### Swagger\nThe swagger can be an url or just some content paste on the UI\n\n### Testing\nYou can enable the testing for your ap.\nClick on the `Generate a dedicated testing key in Otoroshi` to choose an otoroshi instance and and service group which is used to receive the testing apikey.\n\n@@@warning\nMake sure this service descriptor is the right one for testing and not a production system.\n@@@\n\n### Documentation\nthe last tabs allows you to create a paginate documentation. Like description every page can be written with markdown or set from asset."
  },
  {
    "name": "2-members.md",
    "id": "/producerusage/2-members.md",
    "url": "/producerusage/2-members.html",
    "title": "#Managing team members",
    "content": "#Managing team members\nIn the backoffice team, click on the `Team members` entry, on the left.\n\n### Add a new member\nSimply select a user in the selector in the top left of the page.\n\n### Remove a member\nHover the avatar of the member and click on the `trash` button\n\n### Update member permission\nHover the avatar of the member and click on the `cog` button.\nThen, choose:\n\n* admin: member can access everything\n* api editor: member can't manage team but can create an api.\n* nothing: member can just subscribe another team api\n\n### Update apikeys visibility\nA switch button allow to team admins to set apikey visibility. If it's on off position, just team admins are able to see apikeys."
  },
  {
    "name": "3-assets.md",
    "id": "/producerusage/3-assets.md",
    "url": "/producerusage/3-assets.html",
    "title": "Managing team assets",
    "content": "# Managing team assets\n\nIn the backoffice team, click on the `Team assets` entry, on the left.\nAnd you should see the list of existing `assets`\n\n@@@ warning\nIf a `Something went wrong !!!` message is displayed, look a the [Tenant / Bucket configuration](../adminusage/1-tenants.md)\n@@@\n\n## Add a new assets\nSelect a file after click toh the `Select file` button, then the filename, title and content-type should be pre-filled.\nYou can overwrite this informations and add a description if you want.\nClick to the `Add asset` button to finalize the action.\nThis asset can be just used for this team."
  },
  {
    "name": "4-revenus.md",
    "id": "/producerusage/4-revenus.md",
    "url": "/producerusage/4-revenus.html",
    "title": "Team revenus",
    "content": "# Team revenus\n\nIn the backoffice team, click on the `Team revenus` entry, on the left.\nAnd you should see the list of the `team revenus`.\n\nRevenus are calculated by month and could be synchronized with otoroshi if data's not fresh.\n\nThe total revenus by month is display on top right of the board and below, you can see the total by api.\nAfter clicking on a api revenu, you can see the division by apikeys."
  },
  {
    "name": "index.md",
    "id": "/producerusage/index.md",
    "url": "/producerusage/index.html",
    "title": "Using Daikoku as api producer",
    "content": "# Using Daikoku as api producer\n\nNow we will see how to use Daikoku for basic tasks that will be useful for your day to day work with Daikoku.\n\n\n@@@ index\n\n* [managing apis](./1-apis.md)\n* [managing teams members](./2-members.md)\n* [managing assets](./3-assets.md)\n* [team revenus](./4-revenus.md)\n\n@@@\n"
  },
  {
    "name": "quickstart.md",
    "id": "/quickstart.md",
    "url": "/quickstart.html",
    "title": "Try Daikoku in 5 minutes",
    "content": "# Try Daikoku in 5 minutes\nwhat you will need :\n\n* Docker\n* Docker-Compose\n* 5 minutes of free time\n\nYou can start a sandboxed environment using here with the following command\n\n```sh\ncd demo\ndocker-compose up\n```\n\n## What about the UI\n\nGo to <a href=\"http://daikoku.oto.tools/\" target=\"_blank\">http://daikoku.oto.tools/</a> and log in with the **following credential** admin@daikoku.io/password\n\nIf you want to know more about Daikoku, you should continue reading the documentation starting with @ref:[how to get Daikoku](./getdaikoku/index.md)\n"
  },
  {
    "name": "admin.md",
    "id": "/setup/admin.md",
    "url": "/setup/admin.html",
    "title": "Manage admin users",
    "content": "# Manage admin users\n\n## Create admin user after the first run\n\nAfter using the default super admin to the first connection to Daikoku, it can be a good idea to create a new super admin.\nGo to `settings (avatar icon) / Organizations settings`.\n\n@@@ div { .centered-img }\n<img src=\"../img/main_page_menu.png\" />\n@@@\n\nGo to the `Users` page\nYou will see the list of registered admin users.\n\n@@@ div { .centered-img }\n<img src=\"../img/user_page.png\" />\n@@@\n\n\nNow, you can create a new user. Enter informations about the new admin you want to create.\n\n@@@ div { .centered-img }\n<img src=\"../img/new_user.png\" />\n@@@\n\nMostly activate `Daikoku admin.`\nClick on `Create`.\n\nNow, you can discard the generated `Super admin`, confirm, then logout, login with the admin user you have just created and the danger popup will go away\n\n## Discard admin user\n\nGo to `settings (avatar icon) / Organizations settings / Users`, you will see a list of users that you can discard. \nJust hover the avatar and click on the `Remove User` button (trash icon) and confirm that you actually want to discard an admin user.\nYou can also just toggle off the admin status of the user on clicking the `toggle admin status` button (shield icon).\n\n\n"
  },
  {
    "name": "index.md",
    "id": "/setup/index.md",
    "url": "/setup/index.html",
    "title": "Setup Daikoku",
    "content": "# Setup Daikoku\n\nNow that Daikoku is running, you are ready to log into the Daikoku admin dashboard and setup your instance. Just go to :\n\n<a href=\"http://daikoku.oto.tools:8080\" target=\"_blank\">http://daikoku.oto.tools:8080</a>\n\nand you will see the following page\n \n@@@ div { .centered-img }\n<img src=\"../img/home_page.png\" />\n@@@\n\nnow click on the login button and you will see the login page\n\n@@@ div { .centered-img }\n<img src=\"../img/login_page.png\" />\n@@@\n\n@@@ warning\nUse the credentials generated in Daikoku **logs** during **first run**.\n@@@\n\n(of course, you can change this url dependending on the configuration you provided to Daikoku).\n\nOnce logged in, the first screen you'll see should look like :\n\n@@@ div { .centered-img #first-login }\n<img src=\"../img/main_page.png\" />\n@@@\n\n@@@ index\n\n* [create admins](./admin.md)\n\n@@@\n"
  },
  {
    "name": "1-otoroshi.md",
    "id": "/tenantusage/1-otoroshi.md",
    "url": "/tenantusage/1-otoroshi.html",
    "title": "Managing Otoroshi instances",
    "content": "# Managing Otoroshi instances\n\nGo to `settings/Organizations settings` and then click `Otoroshi instances` on the left menu.\n\nAnd you should see the list of existing `Otoroshi instances`\n\n## Add a new Otoroshi\n\nClick on the `Create` button.\nA Otoroshi instance is a really simple to create. Just fill the otoroshi url (URL to api, not client ;)), the host and credentials.\n\n## Update an existing instance\n\nTo update an Otoroshi instances, just click the `pen` button. You can modify the otoroshi url (URL to api, not client ;)), the host or credentials.\n\n## Remove an existing instance\n\nTo delete an Otoroshi instances, just click the `trash` button and confirm the command"
  },
  {
    "name": "2-teams.md",
    "id": "/tenantusage/2-teams.md",
    "url": "/tenantusage/2-teams.html",
    "title": "Managing teams",
    "content": "# Managing teams\n\nGo to `settings/Organizations settings` and then click `teams` on the left menu.\n\nAnd you should see the list of existing `teams`\n\n## Add a new team\n\nClick on the `Create` button.\nA team need some informations :\n\n* tenant (By default, the current tenant)\n* Name (Name need to be unique for the tenant)\n* Description, a small text to describe the team main page.\n* Team contact, an email adress for a simple contact\n* Team avatar, it could be an URl or an assets from the object manager\n* Metadatas, some extra informations that can be passed with the api calls with team apikeys\n\n## Update an existing team\nHover the team avatar and click the `pen` button. All the informations filled during the team creation can be overwritten.\n\n## Delete an existing team\n\nHover the team avatar and click the `trash` button and confirm the command.\n\n## Manage team members\n\nHover the team avatar and click the `users` button. You will redirect to the team members page.\nYou can refer to the [managing members](../producerusage/2-members.md)\n\n"
  },
  {
    "name": "3-assets.md",
    "id": "/tenantusage/3-assets.md",
    "url": "/tenantusage/3-assets.html",
    "title": "Managing assets",
    "content": "# Managing assets\n\nGo to `settings/Organizations settings` and then click `Tenant assets` on the left menu.\n\nAnd you should see the list of existing `assets`\n\n@@@ warning\nIf a `Something went wrong !!!` message is displayed, look a the [Tenant / Bucket configuration](../adminusage/1-tenants.md)\n@@@\n\n## Add a new assets\nSelect a file after click toh the `Select file` button, then the filename, title and content-type should be pre-filled.\nYou can overwrite this informations and add a description if you want.\nClick to the `Add asset` button to finalize the action.\nThis asset can be used for tenant or team (avatar, css file, js file ...)\n\n\n"
  },
  {
    "name": "index.md",
    "id": "/tenantusage/index.md",
    "url": "/tenantusage/index.html",
    "title": "Using Daikoku as Tenant admin",
    "content": "# Using Daikoku as Tenant admin\n\nNow we will see how to use Daikoku as tenant admin.\n\n@@@ index\n\n* [managing Otoroshi instances](./1-otoroshi.md)\n* [managing teams](./2-teams.md)\n* [managing assets](./3-assets.md)\n\n@@@\n"
  }
]