[
  {
    "name": "about.md",
    "id": "/about.md",
    "url": "/about.html",
    "title": "About Daikoku",
    "content": "# About Daikoku\n\nWhile [Otoroshi](https://maif.github.io/otoroshi/) is the perfect tool to manage your webapps in a technical point of view it lacked of business perspective. This is not the case anymore whith **Daikoku**.\n\nWhile **Otoroshi** is a standalone, Daikoku is a developer portal which stands in front of **Otoroshi** and provides some business feature.\n\nWhether you want to use **Daikoku** for your public APIs you want to monetize or with your private APIs to provide some documentation, facilitation and self-service feature, it will be the perfect portal for **Otoroshi**.\n\n## Philosophy \n\nEvery OSS product build at <a href=\"https://www.maif.fr/\" target=\"_blank\">MAIF</a> like <a href=\"https://maif.github.io/otoroshi/\" target=\"_blank\">Otoroshi</a> or <a href=\"https://maif.github.io/izanami/\" target=\"_blank\">Izanami</a> follow a common philosophy. \n\n* the services or API provided should be technology agnostic.\n* http first: http is the right answer to the previous quote   \n* api First: The UI is just another client of the api. \n* secured: The services exposed need authentication for both humans or machines  \n* event based: The services should expose a way to get notified of what happened inside. \n"
  },
  {
    "name": "1-tenants.md",
    "id": "/adminusage/1-tenants.md",
    "url": "/adminusage/1-tenants.html",
    "title": "Managing tenants",
    "content": "# Managing tenants\n\nGo to `settings/Organizations settings`\n\n@@@ div { .centered-img }\n<img src=\"../img/organisation_settings.png\" />\n@@@\n\nAnd you should see the list of the existing `tenants`.\n\n## Create a tenant\n\nTo create a new tenant, just click on the `create a new tenant` button.\n\n### Common informations\n\nModify the name and the domain name of the current tenant.\nIt's possible to set the default language of the tenant.\n\n### Tenant style\n\nTenants could be customized in Daikoku.\nLogo, title, description can be changed.\nThe css can be customized with some css code or js code, with overwriting css variables or with a css/js file.\n\n### Authentication & Security\n\nA tenant can be private or public. In the last case, just public api can be accessed by unauthenticated users.\nAuthentication can be set by choosen Local auth. or a tiers auth. like LDAP, OAuth2 or Otoroshi.\nThe user session duration can be set here, by default it last 24h.\n\nA creation security option can be activated to forbid all unauthorized team to create API. You just have to authorize the team from the team edit page.\nA subscription security option can be activated to forbid all personal team to subscribe to an API.\nIt's possible to hide teams page (/teams) to prevent everyone for knowing all teams in the organisation. This is a feature primally intended for public tenants.\n\n### Audit trail\n\nThe settings for the output of the audit trail can be set on this page.\nThe output of it, in addition to writing in database, can be an elastic, a kafka or webhooks.\n\n### Alerting\nThe email adresses to report some Daikoku alert.\n\n### Mailer\nThe mailer type, by default just the standard output. Mailgun or Mailjet can be configured.\n\n### Bucket\nAn object storage can be set to store tenant and team assets.\n\n### Unlogged home description\nThe unlogged home description is the first content shown to user for private tenant, before the login page.\nIt can also be enabled for public tenant."
  },
  {
    "name": "2-users.md",
    "id": "/adminusage/2-users.md",
    "url": "/adminusage/2-users.html",
    "title": "Managing users",
    "content": "# Managing users\n\nUsers in Daikoku can be available in all tenants. As Daikoku admin, you are responsible for managing users.\n\n## Admin status\n\nNothing's easier to give or remove admin status to **another** user. Just hover the user's avatar and click on the `toggle admin status` button (shield icon).\nIt's impossible to remove oneself the admin status.\n\n## Create a new user\n\nTo create a new user, just click on the `Create new user` button. \nYou will have some informations to fill :\n\n* User's name\n* User's email adress\n* Possibly user's avatar. It could be an URl or an assets from the object manager\n* Activate / deactivate the admin status\n* User's password\n* User's personal token\n* The tenants which are accessible to the user\n* Metadata\n\nTo finalize the creation, click on the `Create` button.\n\n## Remove User\n\nTo delete a user, just hover the avatar and click on `Delete` button (bin icon). Finaly, confirm the command.\n\n## Impersonate user\n\nDaikoku provides users impersonation. Just hover over the avatar and click on `impersonate` button (ninja icon)."
  },
  {
    "name": "3-sessions.md",
    "id": "/adminusage/3-sessions.md",
    "url": "/adminusage/3-sessions.html",
    "title": "Managing sessions",
    "content": "# Managing sessions\n\nWith Daikoku, you can manage connected users' sessions and you can discard sessions whenever you want. Sessions last 24h by default and you can customize them with tenant authentication information @ref:[tenant config.](./1-tenants.md)\n\n## Admin. sessions\n\nTo see last current admin session on Daikoku from the UI, go to `settings (avatar icon) / Organizations settings` and then `User sessions`. You can discard individual sessions or all sessions at once using `Delete` button (trash icon) or `Delete all sessions` button.\n"
  },
  {
    "name": "4-importexport.md",
    "id": "/adminusage/4-importexport.md",
    "url": "/adminusage/4-importexport.html",
    "title": "Import and export",
    "content": "# Import and export\n\nWith Daikoku, you can easily save the current state of the instance and restore it later. Go to `Settings (avatar icon) / Organizations settings` and then `import/export`.\n\n## Full export\n\nClick on the `download state` button.\n\nYour browser will start downloading a ndjson file containing the internal state of your Daikoku instance.\n\n## Full import\n\nIf you want to restore an export, Go to `settings (avatar icon) / Organizations settings` and then `import/export`.  Click on the `import state` button and choose your ndjson export file.\n"
  },
  {
    "name": "index.md",
    "id": "/adminusage/index.md",
    "url": "/adminusage/index.html",
    "title": "Using Daikoku as Daikoku admin",
    "content": "# Using Daikoku as Daikoku admin\n\nNow we will see how to use Daikoku as Daikoku admin.\n\n@@@ index\n\n* [managing tenants](./1-tenants.md)\n* [managing users](./2-users.md)\n* [managing sessions](./3-sessions.md)\n* [import and export](./4-importexport.md)\n\n@@@\n"
  },
  {
    "name": "apis.md",
    "id": "/apis.md",
    "url": "/apis.html",
    "title": "Admin REST API",
    "content": "# Admin REST API\nDaikoku provides a fully featured REST admin API to perform almost every operation possible in the Daikoku dashboard.\n\n## Swagger descriptor\n\nThe Daikoku admin API is described using OpenAPI format and is available at :\n\nhttps://maif.github.io/daikoku/manual/code/swagger.json\n\n## Swagger documentation\n\nYou can read the OpenAPI descriptor in a more human friendly fashion using `Swagger UI`. The swagger UI documentation of the Daikoku admin API is available at :\n\nhttps://maif.github.io/daikoku/swagger-ui/index.html\n\nEvery Daikoku instance provides its own embedded OpenAPI descriptor at :\n\nhttp://daikoku.oto.tools:8080/api/swagger/ui\n\nYou can also read the swagger UI documentation of the Daikoku admin API below :\n\n@@@ div { .swagger-frame }\n\n\n@@@"
  },
  {
    "name": "archi.md",
    "id": "/archi.md",
    "url": "/archi.html",
    "title": "Architecture",
    "content": "# Architecture\n\nTo make Daikoku works, you'll need an [Mongodb](https://www.mongodb.com/) (used by default) or an [Postgres](https://www.postgresql.org/) datastore and an emailing provider ([Mailgun](https://www.mailgun.com/) and [Mailjet](https://www.mailjet.com/) are supported). Tou can also export the audit trail of Daikoku using many techniques with webhooks, a [Kafka](https://kafka.apache.org/) topic or an [elastic cluster](https://www.elastic.co/fr/products/elasticsearch).\n\nAs you can see, Daikoku is capable of working with many [Otoroshi](https://maif.github.io/otoroshi) cluster instances to handle all the use cases of exposing APIs. Daikoku will **never** interact directly with your APIs.\n\n@@@ div { .centered-img }\n<img src=\"./img/daikoku-architecture.png\" />\n@@@\n"
  },
  {
    "name": "1-subscribe.md",
    "id": "/consumerusage/1-subscribe.md",
    "url": "/consumerusage/1-subscribe.html",
    "title": "Subscribe to an api",
    "content": "# Subscribe to an api\n\n## Choose a plan\nFirst of all, you need to choose an API to subscribe. In the information page of the API, select the `Plans` tab.\nhere are presented the differents pricing plans of the api (if team decides to present multiple plans).\nJust click the `subscribe` button. If you are member of several teams, please choose teams to make subscription and click the `subscribe` button.\n\nIf the subscription is automatic, a green message appears to inform you that the subscription is successful.\nIf the subscription is manual, the owner team has been notified of your request. please wait a moment.\n"
  },
  {
    "name": "2-apikeys.md",
    "id": "/consumerusage/2-apikeys.md",
    "url": "/consumerusage/2-apikeys.html",
    "title": "Manage APIkeys",
    "content": "# Manage APIkeys\nIn the backoffice team, click on the `Team APIkeys` entry, on the left.\nAnd you should see the list of existing `APIkeys`\n\n## View APIkeys\nOn the right of the API line, click on the `API Keys` button.\nAll subscribed plan for the API are displayed.\n - Secret can be reseted for an APIkey\n - APIkey usage statistics are avalaible after clicking on the `stats` button.\nStats are avalaible for `today`, `yesterday`, `last week`, `last month` or `the billing period`.\nYou can see a graph to see usage or some global informations likes hits count, average duration or average overhead.\n - To copy credentials, click on the `copy` button at the bottom right of the component.\n - APIkey Rotation can be enabled and setup (by choosing rotation period and grace period)\n - APIkey can be enabled or disabled\n \nEvery subscription have an integration token, which make credentials accessible by admin api. This token is visible in integration token tab.\n\n## View global statistics\nAfter clicking on the `see stats` button, global statistics are displayed.\nIt's a view of your usage by APIs, split by APIkeys."
  },
  {
    "name": "3-billing.md",
    "id": "/consumerusage/3-billing.md",
    "url": "/consumerusage/3-billing.html",
    "title": "Team billing",
    "content": "# Team billing\n\nTeam billing page is basically the same view than @ref:[Team income](../producerusage/4-income.md) with consumer point of view.\n"
  },
  {
    "name": "index.md",
    "id": "/consumerusage/index.md",
    "url": "/consumerusage/index.html",
    "title": "Using Daikoku as api consumer",
    "content": "# Using Daikoku as api consumer\n\nNow we will see how to use Daikoku for basic tasks that will be useful for your day to day work with Daikoku as consumer.\n\n\n@@@ index\n\n* [subscribe api](./1-subscribe.md)\n* [managing apikeys](./2-apikeys.md)\n* [team billing](./3-billing.md)\n\n@@@\n"
  },
  {
    "name": "index.md",
    "id": "/deploy/index.md",
    "url": "/deploy/index.html",
    "title": "Deploy to production",
    "content": "# Deploy to production\n\nNow it's time to deploy Daikoku in production, in this chapter we will see what kind of things you can do.\n\n## Deploy with Docker\n\nDaikoku is available as a Docker image on DockerHub so you can just use it in any Docker compatible environment\n\n```sh\ndocker run -p \"8080:8080\" maif/daikoku:1.1.2\n```\n\nYou can also pass useful args like :\n\n```\ndocker run -p \"8080:8080\" daikoku -Dconfig.file=/usr/app/daikoku/conf/daikoku.conf -Dlogger.file=/usr/app/daikoku/conf/daikoku.xml\n```\n\nIf you want to provide your own config file, you can read @ref:[the documentation about config files](../firstrun/configfile.md).\n\nYou can also provide some ENV variable using the `--env` flag to customize your Daikoku instance.\n\nThe list of possible env variables is available @ref:[here](../firstrun/env.md).\n\nYou can use a volume to provide configuration like :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/conf\" maif/daikoku:1.1.2\n```\n\nYou can also use a volume if you choose to use exports files :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/imports\" maif/daikoku :1.1.2 -Ddaikoku.init.data.from=/usr/app/daikoku/imports/export.ndjson\n```\n\n## Deploy manually\n\nAs Daikoku is a PlayFramwork application, you can follow the [PlayFramework documentation](https://www.playframework.com/documentation/2.6.x/Production) to deploy your application.\n"
  },
  {
    "name": "configfile.md",
    "id": "/firstrun/configfile.md",
    "url": "/firstrun/configfile.html",
    "title": "Config. with files",
    "content": "# Config. with files\n\nThere are a lot of things you may configure in Daikoku. By default, Daikoku provides a configuration that should be enough for testing purpose. But you'll likely need to update this configuration when you'll need to move Daikoku into production.\n\nIn this page, any configuration property can be set at runtime using a `-D` flag when launching Daikoku like :\n\n```sh\njava -Dhttp.port=8080 -jar daikoku.jar\n```\n\nor\n\n```sh\n./bin/daikoku -Dhttp.port=8080\n```\n\n## Common configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.mode`|String|\"prod\"| Daikoku running mode. Supported values are `dev` or `prod` |\n|`daikoku.exposedOn`|String|http.port| the http port exposed by Daikoku  |\n|`daikoku.singingkey`|String|\"secret\"| the secret used for signing the JWT token |\n|`daikoku.tenants.provider` | string | \"local\" | the way to get the tenant to display. Supported values are `local`, `header` or `hostname`|\n|`daikoku.tenants.hostheaderName` | string | Otoroshi-Proxied-Host | the header key to get host, in case of daikoku.tenants.provider is `hostname` |\n|`daikoku.team.defaultApiKeyVisibility`| string | \"User\" | The default value of team apikeys visibility for its own members based on Team permission. Supported values are `Administrator`, `ApiEditor` or `User` |\n|`daikoku.exposition.provider` | string | \"none\" | activate the exchange protocol. Supported values are `otoroshi` (for [Otoroshi Exchange Protocol](https://maif.github.io/otoroshi/manual/usage/2-services.html#otoroshi-exchange-protocol) and `none` |\n|`daikoku.snowflake.seed` | number | 0 | this number will is used to generate unique ids across the cluster. Each Otorshi instance must have a unique seed. |\n\n## Admin api\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.api.type`|String|\"local\"| the provider of apikey for admin apis. Supported values are `local` and `otoroshi` |\n|`daikoku.api.key`|String|\"secret\"| the local apikey of admin apis |\n|`daikoku.api.headerName`|String|\"Otoroshi-Claim\"| |\n|`daikoku.api.headerSecret`|String|\"secret\"|  |\n\n## Otoroshi settings\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.exposition.otoroshi.stateHeaderName` | string | \"Otoroshi-State\" | the otoroshi exchange protocol header name |\n|`daikoku.exposition.otoroshi.stateRespHeaderName` | string | \"Otoroshi-State-resp\" | the otoroshi exchange protocol response header name |\n|`daikoku.otoroshi.groups.namePrefix` | string |  | value to filter otoroshi groups based on the group name |\n|`daikoku.otoroshi.groups.idPrefix` | string | | value to filter otoroshi groups based on the group d |\n|`daikoku.otoroshi.sync.master` | boolean | false | value to define if the instance is the master to sync otoroshi datas |\n|`daikoku.otoroshi.sync.key` | string | \"secret\" | sync key to sync otoroshi |\n|`daikoku.otoroshi.sync.cron` | boolean | false | value to define if otorshi values are sync by cron |\n|`daikoku.otoroshi.sync.instance` | number |  | Daikoku instance number |\n\n## Daikoku init\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.init.host`|String|\"localhost\"|  |\n|`daikoku.init.admin.name`|String|\"Super admin\"| Daikoku default admin name |\n|`daikoku.init.admin.email`|String| \"admin@daikoku.io\" | Daikoku default admin email |\n|`daikoku.init.admin.password`|String| |Daikoku default admin password |\n|`daikoku.init.data.from` | string |  | a file path or a URL to a Daikoku export file. If the datastore is empty on startup, this file will be used to import data to the empty DB  |\n\n\n## DB configuration\n\n> Choose database\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.storage` | string | \"mongo\" | You can use mongo or postgres database |\n\n\n> Mongo configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`mongodb.uri` | string | \"mongodb://localhost:27017/daikoku\" | the uri to mongdb datastore |\n\n\n> Postgres configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.postgres.port` | int | 5432 | the port used to connect to datastore |\n|`daikoku.postgres.host` | string | \"localhost\" | the host where datastore is |\n|`daikoku.postgres.database` | string | \"default\" | the name of the database |\n|`daikoku.postgres.username` | string | \"postgres\" | the user used to connect to database |\n|`daikoku.postgres.password` | string | \"postgres\" | the password used to connect to database |\n|`daikoku.postgres.schema` | string | \"public\" | the current schema |\n\n> Audit trail purge configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n|`daikoku.audit.purge.cron` | boolean | false | enable the automatic purge of audit trail in database  |\n|`daikoku.audit.purge.interval` | string | \"1hour\" | The interval of purge run |\n|`daikoku.audit.purge.max.date` | string | \"60days\" | retention date for the audit trail |\n\n## Play specific configuration\n\nAs Daikoku is a [Play app](https://www.playframework.com/), you should take a look at [Play configuration documentation](https://www.playframework.com/documentation/2.6.x/Configuration) to tune its internal configuration\n\n| name | type | default value  | description |\n| ---- |:----:| -------------- | ----- |\n| `http.port` | number | 8080 | the http port used by Daikoku. You can use 'disabled' as value if you don't want to use http |\n| `https.port` | number | disabled | the https port used by Daikoku. You can use 'disabled' as value if you don't want to use https |\n| `play.http.secret.key` | string | \"secret\" | the secret used to sign Daikoku session cookie |\n| `play.http.session.secure` | boolean | false | whether or not the Daikoku backoffice session will be served over https only |\n| `play.http.session.httpOnly` | boolean | true | whether or not the Daikoku backoffice session will be accessible from Javascript |\n| `play.http.session.maxAge` | number | 259200000 | the number of seconds before Daikoku backoffice session expired |\n| `play.http.session.domain` | string | null | the domain on which the Daikoku backoffice session is authorized |\n| `play.http.session.cookieName` |  string | \"daikoku-session\" | the name of the Daikoku backoffice session |\n| `server.https.keyStore.path` |  string |  | the path to the keyStore containing the private key and certificate, if not provided generates a keystore for you |\n| `server.https.keyStore.type` |  string | \"JKS\" | the keyStore type |\n| `server.https.keyStore.password` |  string | \"\" | the password |\n| `server.https.keyStore.algorithm` |  string |  | The keyStore algorithm, defaults to the platforms default algorithm |\n\n\n\n## More config. options\n\nSee https://github.com/MAIF/daikoku/blob/master/daikoku/conf/application.conf\n\nif you want to configure https on your Daikoku server, just read [PlayFramework documentation about it](https://www.playframework.com/documentation/2.6.x/ConfiguringHttps)\n\n## Example of configuration file\n\n```conf\ndaikoku {\n\n  mode = \"prod\"\n  signingKey = \"secret\"\n\n  exposedOn = ${http.port}\n\n  api {\n    type = \"local\"\n    key = \"secret\"\n    headerName = \"Otoroshi-Claim\"\n    headerSecret = \"secret\"\n  }\n\n  init {\n    host = \"localhost\"\n    admin {\n      name = \"Super admin\"\n      email = \"admin@daikoku.io\"\n      password = \"password\"\n    }\n    data {\n      from = \"/config/daikoku.ndjson\"\n      headers = {}\n    }\n  }\n\n  snowflake {\n    seed = 0\n  }\n\n  tenants {\n    provider = \"local\"\n  }\n\n  exposition {\n    provider = \"none\"\n    otoroshi {\n      stateHeaderName = \"Otoroshi-State\"\n      stateRespHeaderName = \"Otoroshi-State-Resp\"\n    }\n  }\n\n  otoroshi {\n    groups {\n      namePrefix = \"daikoku\"\n    }\n    sync {\n      interval = 3600000\n      master = false\n      key = \"secret\"\n      cron = true\n      instance = 0\n    }\n  }\n\n  stats {\n    sync {\n      interval = 3600000\n      cron = true\n    }\n    call {\n      interval = 600000\n    }\n  }\n\n  audit {\n    purge {\n      cron = false\n      interval = 1hour\n      max.date = 60days\n    }\n  }\n}\n\nmongodb {\n  uri = \"mongodb://localhost:27017/daikoku\"\n}\n\n\nhttp.port = 8080\nhttps.port = disabled\n\nplay {\n  application.loader = \"fr.maif.otoroshi.daikoku.DaikokuLoader\"\n  modules {}\n  filters {\n    enabled = []\n  }\n  http {\n    filters = play.api.http.NoHttpFilters\n    secret {\n      key = \"secret\"\n    }\n    session = {\n      cookieName = \"daikoku-session\"\n      secure = false\n      maxAge = 259200000\n      httpOnly = true\n      sameSite = \"lax\"\n      domain = null\n      path = ${play.http.context}\n      jwt {\n        signatureAlgorithm = \"HS256\"\n        expiresAfter = ${play.http.session.maxAge}\n        clockSkew = 5 minutes\n        dataClaim = \"data\"\n      }\n    }\n  }\n  server {\n    akka {\n      requestTimeout = 60s\n    }\n    http {\n      port = ${http.port}\n      idleTimeout = 60s\n    }\n  }\n}\n\n```\n"
  },
  {
    "name": "datastore.md",
    "id": "/firstrun/datastore.md",
    "url": "/firstrun/datastore.html",
    "title": "Choose your audit trail datastore",
    "content": "# Choose your audit trail datastore\n\nDaikoku needs to store its audit trail in a datastore. Daikoku supports multiple datastores. \nIt store its in the main database by default but you can add another one besides\n\nAvailable datastores for audit trail are the following :\n\n* elastic\n* kafka\n* webhook\n\nYou can manage it in the tenant settings page.\n"
  },
  {
    "name": "env.md",
    "id": "/firstrun/env.md",
    "url": "/firstrun/env.html",
    "title": "Config. with ENVs",
    "content": "# Config. with ENVs\n\nNow that you know @ref:[how to configure Daikoku with the config. file](./configfile.md) every properties in the following block can be overriden by an environment variable (an env. variable is written like `${?ENV_VARIABLE}`).\n\n```\nmode = ${?DAIKOKU_MODE}\nsigningKey = ${?DAIKOKU_SIGNING_KEY}\nexposedOn = ${?DAIKOKU_EXPOSED_ON}\nype = ${?DAIKOKU_API_TYPE}\nkey = ${?DAIKOKU_API_KEY}\nheaderName = ${?DAIKOKU_API_HEADERNAME}\nheaderSecret = ${?DAIKOKU_API_HEADERSECRET}\nhost = ${?DAIKOKU_INIT_HOST}\nname = ${?DAIKOKU_INIT_ADMIN_NAME}\nemail = ${?DAIKOKU_INIT_ADMIN_EMAIL}\npassword = ${?DAIKOKU_INIT_ADMIN_PASSWORD}\nfrom = ${?DAIKOKU_INIT_DATA_FROM}\nseed = ${?INSTANCE_NUMBER}\nprovider = ${?DAIKOKU_TENANT_PROVIDER}\nhostheaderName = ${?DAIKOKU_TENANT_HOST_HEADERNAME}\ndefaultApiKeyVisibility = ${?DAIKOKU_TEAM_DEFAULT_APIKEY_VISIBILITY}\nprovider = ${?DAIKOKU_EXPOSITION_PROVIDER}\nstateHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_HEADER_NAME}\nstateRespHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_RESP_HEADER_NAME}\nnamePrefix = ${?DAIKOKU_OTOROSHI_GROUPS_NAME_PREFIX}\nidPrefix = ${?DAIKOKU_OTOROSHI_GROUPS_ID_PREFIX}\nmaster = ${?DAIKOKU_OTOROSHI_SYNC_MASTER}\nkey = ${?DAIKOKU_OTOROSHI_SYNC_KEY}\ncron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}\ninstance = ${?INSTANCE_NUMBER}\ncron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}\nuri = ${?MONGODB_URI}\nuri = ${?MONGODB_ADDON_URI}\nhttp.port = ${?PORT}\nhttps.port = ${?HTTPS_PORT}\nkey = ${?PLAY_CRYPTO_SECRET}\ncookieName = ${?DAIKOKU_SESSION_NAME}\nsecure = ${?DAIKOKU_SESSION_SECURE}\nmaxAge = ${?DAIKOKU_SESSION_MAXAGE}\nhttpOnly = ${?DAIKOKU_SESSION_HTTPONLY}\nsameSite = ${?DAIKOKU_SESSION_SAMESITE}\ndomain = ${?DAIKOKU_SESSION_DOMAIN}\npath=${?HTTPS_KEYSTORE_PATH}\ntype=${?HTTPS_KEYSTORE_TYPE}\npassword=${?HTTPS_KEYSTORE_PASSWORD}\nalgorithm=${?HTTPS_KEYSTORE_ALGO}\nhost = ${?DAIKOKU_POSTGRES_HOST}\nschema = ${?DAIKOKU_POSTGRES_SCHEMA}\ndatabase = ${?DAIKOKU_POSTGRES_DATABASE}\nusername = ${?DAIKOKU_POSTGRES_USERNAME}\npassword = ${?DAIKOKU_POSTGRES_PASSWORD}\nport = ${?DAIKOKU_POSTGRES_PORT}\nstorage = ${?DAIKOKU_STORAGE}\n```\n"
  },
  {
    "name": "index.md",
    "id": "/firstrun/index.md",
    "url": "/firstrun/index.html",
    "title": "First run",
    "content": "# First run\n\nNow that you have your own distro of Daikoku, it's time to run it. \n\nBut before doing so, you'll need to make a few choices about some essential stuff in order to have the version of Daikoku which suits to your needs.\n\nLet's start with the datastore !\n\n@@@ index\n\n* [choose an audit_trail_datastore](./datastore.md)\n* [use custom config file](./configfile.md)\n* [use ENV](./env.md)\n* [initial state](./initialstate.md)\n* [Run](./run.md)\n\n@@@"
  },
  {
    "name": "initialstate.md",
    "id": "/firstrun/initialstate.md",
    "url": "/firstrun/initialstate.html",
    "title": "Import initial state",
    "content": "# Import initial state\n\nNow you are almost ready to run Daikoku for the first time, but maybe you want to import data from previous Daikoku installation in your current datastore.\n\nTo do that, you need to add the `app.init.data.from` setting to the Daikoku configuration (or `$DAIKOKU_INIT_DATA_FROM` env).\n\nIt can be a file path or a URL to the ndjson file.\n"
  },
  {
    "name": "run.md",
    "id": "/firstrun/run.md",
    "url": "/firstrun/run.html",
    "title": "Run Daikoku",
    "content": "# Run Daikoku\n\nNow you are ready to run Daikoku. You can run the following command with some tweaks depending on the way you want to configure Daikoku. If you want to pass a custom configuration file, use the `-Dconfig.file=/path/to/file.conf` option in the following commands.\n\n## From .zip file\n\n```sh\nunzip daikoku-dist.zip\ncd daikoku-vx.x.x\n./bin/daikoku\n```\n\n## From .jar file\n\nFor Java 11\n\n```sh\njava -jar daikoku.jar\n```\n\n## From docker\n\n```sh\ndocker run -p \"8080:8080\" maif/daikoku:1.1.2\n```\n\nYou can also pass useful args like :\n\n```\ndocker run -p \"8080:8080\" daikoku -Dconfig.file=/usr/app/daikoku/conf/daikoku.conf -Dlogger.file=/usr/app/daikoku/conf/daikoku.xml\n```\n\nIf you want to provide your own config file, you can read @ref:[the documentation about config files](../firstrun/configfile.md).\n\nYou can also provide some ENV variable using the `--env` flag to customize your Daikoku instance.\n\nThe list of possible env variables is available @ref:[here](../firstrun/env.md).\n\nYou can use a volume to provide configuration like :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/conf\" maif/daikoku:1.1.2\n```\n\nYou can also use a volume if you choose to use exports files :\n\n```sh\ndocker run -p \"8080:8080\" -v \"$(pwd):/usr/app/daikoku/imports\" maif/daikoku :1.1.2 -Ddaikoku.init.data.from=/usr/app/daikoku/imports/export.ndjson\n```\n\n## Run examples\n\n```sh\n$ java \\\n  -Xms2G \\\n  -Xmx8G \\\n  -Dhttp.port=8080 \\\n  -Ddaikoku.init.data.from=/home/user/daikoku.ndjson \\\n  -Dconfig.file=/home/user/daikoku.conf \\\n  -jar ./daikoku.jar\n\n[info] play.api.Play - Application started (Prod)\n[warn] daikokuEnv - Main dataStore seems to be empty, importing from /home/user/daikoku.conf ...\n[warn] daikokuEnv - Importing from: /home/user/daikoku.ndjson\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:8080\n```\n\nIf you choose to start Daikoku without importing existing data, Daikoku will create a new admin user and print the login details in the log.\n\n```sh\n$ java \\\n  -Xms2G \\\n  -Xmx8G \\\n  -Dhttp.port=8080 \\\n  -jar daikoku.jar\n\n[info] play.api.Play - Application started (Prod)\n[warn] DaikokuEnv - Main dataStore seems to be empty, generating initial data ...\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0.0.0.0:8080\n[warn] DaikokuEnv -\n[warn] DaikokuEnv - You can log in with admin@daikoku.io / wr4pHmVRArCGhHoteMfwqV6UuvQh6J2z\n[warn] DaikokuEnv -\n[warn] DaikokuEnv - Please avoid using the default tenant for anything else than configuring Daikoku\n[warn] DaikokuEnv -\n\n```\n"
  },
  {
    "name": "frombinaries.md",
    "id": "/getdaikoku/frombinaries.md",
    "url": "/getdaikoku/frombinaries.html",
    "title": "From binaries",
    "content": "# From binaries\n\nIf you want to download the last version of Daikoku, you can grab them from the release page of the Daikoku github page :\n\nGo to https://github.com/MAIF/daikoku/releases and get the last version of the `daikoku-xxx.zip` file or the `daikoku.jar` file.\n"
  },
  {
    "name": "fromdocker.md",
    "id": "/getdaikoku/fromdocker.md",
    "url": "/getdaikoku/fromdocker.html",
    "title": "From docker",
    "content": "# From docker\n\nIf you're a Docker aficionado, Daikoku is provided as a Docker image that your can pull directly from Official repos.\n\nFetch the last Docker image of Daikoku :\n\n```sh\ndocker pull maif/daikoku:1.1.2\n# or \ndocker pull maif/daikoku:latest\n```"
  },
  {
    "name": "fromsources.md",
    "id": "/getdaikoku/fromsources.md",
    "url": "/getdaikoku/fromsources.html",
    "title": "From sources",
    "content": "# From sources\n\nTo build Daikoku from sources, you need the following tools :\n\n* git\n* JDK 11\n* SBT\n* node\n* yarn\n\nOnce you've installed all those tools, go to the [Daikoku github page](https://github.com/MAIF/daikoku) and clone the sources :\n\n```sh\ngit clone https://github.com/MAIF/daikoku.git --depth=1\n```\n\nthen you need to run the `build.sh` script to build the documentation, the React UI and the server :\n\n```sh\nsh ./scripts/build.sh\n```\n\nand that's all, you can grab your Daikoku package at `daikoku/target/scala-2.12/daikoku` or `daikoku/target/universal/`.\n\nFor those who want to build only parts of Daikoku, read the following.\n\n## Build the documentation only\n\nGo to the `documentation` folder and run :\n\n```sh\nsbt ';clean;paradox'\n```\n\nThe documentation is located at `documentation/target/paradox/site/main/`\n\n## Build the React UI\n\nGo to the `daikoku/javascript` folder and run :\n\n```sh\nyarn install\nyarn webpack:build\n```\n\nYou will find the JS bundle at `daikoku/public/react-app/daikoku.js`.\n\n## Build the Daikoku server\n\nGo to the `daikoku` folder and run :\n\n```sh\nsbt ';clean;compile;dist;assembly'\n```\n\nYou will find your Daikoku package at `daikoku/target/scala-2.12/daikoku` or `daikoku/target/universal/`.\n"
  },
  {
    "name": "index.md",
    "id": "/getdaikoku/index.md",
    "url": "/getdaikoku/index.html",
    "title": "Get Daikoku",
    "content": "# Get Daikoku\n\nThere are several ways to get Daikoku to run it on your system.\n\nLet's start with a good old build from sources :)\n\n@@@ index\n\n* [from sources](./fromsources.md)\n* [from binaries](./frombinaries.md)\n* [from docker](./fromdocker.md)\n\n@@@"
  },
  {
    "name": "index.md",
    "id": "/index.md",
    "url": "/index.html",
    "title": "Daikoku",
    "content": "# Daikoku\n\n**Daikoku** is the developer portal which was missing for Otoroshi. It is written in <a href=\"https://www.scala-lang.org/\" target=\"_blank\">Scala</a> and developped by the <a href=\"https://maif.github.io\" target=\"_blank\">MAIF OSS</a> team.\n\n\n> *In Japan, <a href=\"https://en.wikipedia.org/wiki/File:Daikoku.jpg\" target=\"blank\">Daikokuten</a> (大黒天), the god of great darkness or blackness, or the god of five cereals, is one of the Seven Lucky Gods (Fukujin). Daikokuten evolved from the Buddhist form of the Indian deity Shiva intertwined with the Shinto god Ōkuninushi. The name is the Japanese equivalent of Mahākāla, the Hindu name for Shiva.*\n\n@@@ div { .centered-img }\n[![Build](https://github.com/MAIF/daikoku/workflows/Build/badge.svg)](https://travis-ci.org/MAIF/daikoku) [![Join the chat at https://gitter.im/MAIF/daikoku](https://badges.gitter.im/MAIF/daikoku.svg)](https://gitter.im/MAIF/daikoku?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [ ![Download](https://img.shields.io/github/release/MAIF/daikoku.svg) ](https://github.com/MAIF/daikoku/releases/download/v1.1.2/daikoku-1.1.2.jar)\n@@@\n\n@@@ div { .centered-img }\n<img src=\"https://github.com/MAIF/daikoku/raw/master/resources/daikoku-logo.png\" width=\"300\"></img>\n@@@\n\n@@@ warning { title='New to Otoroshi ?' }\nYou are not sure of what is **Otoroshi**, you should probably have a look at [this](https://maif.github.io/otoroshi/manual/quickstart.html) first.\n@@@\n\n## Installation\n\nYou can download the latest build of Daikoku as a [fat jar](https://github.com/MAIF/daikoku/releases/download/v1.1.2/daikoku-1.1.2.jar) or as a [zip package](https://github.com/MAIF/daikoku/releases/download/v1.1.2/daikoku-1.1.2.zip).\n\nYou can install and run Otoroshi with this little bash snippet :\n\n```sh\ncurl -L -o daikoku.jar 'https://github.com/MAIF/daikoku/releases/download/v1.1.2/daikoku-1.1.2.jar'\njava -jar daikoku.jar\n```\n\nor using docker :\n\n```sh\ndocker run -p \"8080:8080\" maif/daikoku:1.1.2\n```\n\nNow, open your browser to <a href=\"http://localhost:8080/\" target=\"_blank\">http://localhost:8080/</a>, **log in with the credential generated in the logs** and explore **Daikoku** by yourself\n\n## Documentation\n\n\n## Discussion\n\nJoin the [Daikoku](https://gitter.im/MAIF/daikoku) channel on the [MAIF Gitter](https://gitter.im/MAIF).\n\n## Sources\n\nThe sources of Daikoku are available on [Github](https://github.com/MAIF/daikoku).\n\n## Logo\n\nYou can find the official Daikoku logo [on GitHub](https://github.com/MAIF/daikoku/blob/master/resources/daikoku-logo.png). The Daikoku logo has been created by François Galioto ([@fgalioto](https://twitter.com/fgalioto)).\n\n## Changelog\n\nEvery release, along with migration instructions, is documented on the [Github Releases](https://github.com/MAIF/daikoku/releases) page.\n\n## Patrons\n\nThe work on Daikoku was funded by <a href=\"https://www.maif.fr/\" target=\"_blank\">MAIF</a> with the help of the community.\n\n## Licence\n\nDaikoku is Open Source and available under the [Apache 2 License](https://opensource.org/licenses/Apache-2.0).\n\n@@@ index\n\n* [About Daikoku](about.md)\n* [Architecture](archi.md)\n* [Quickstart](quickstart.md)\n* [Get Daikoku](getdaikoku/index.md)\n* [First run](firstrun/index.md)\n* [Setup](setup/index.md)\n* [Using Daikoku as admin](adminusage/index.md)\n* [Using Daikoku as tenant admin](tenantusage/index.md)\n* [Using Daikoku as API producer](producerusage/index.md)\n* [Using Daikoku as API consumer](consumerusage/index.md)\n* [Integrations API](integrations.md)\n* [Admin REST API](apis.md)\n* [Deploy to production](deploy/index.md)\n\n@@@\n"
  },
  {
    "name": "integrations.md",
    "id": "/integrations.md",
    "url": "/integrations.html",
    "title": "#Integrations API",
    "content": "#Integrations API\nDaikoku provides some integrations API to get some values as JSON.\nTo have more informations, all integration apis are detailed on the @ref:[swagger documentation](./apis.md)."
  },
  {
    "name": "1-apis.md",
    "id": "/producerusage/1-apis.md",
    "url": "/producerusage/1-apis.html",
    "title": "#Managing APIs",
    "content": "#Managing APIs\n\n## Create a new API\nTo create a new API, you can click on the `+ API` button in the catalog page or the `Create new API` button in the Team's APIs page in your back offices' team.\nAfter clicking on the button localized in the catalog page, you need to choose a team which is the owner.\n\n### API informations\nAn API needs a name to be created.\nThen, you can add a small description, which will be displayed in the corresponding catalog's page.\nThe API can be published or not. In the latter case, you can consider this as a draft.\n\n### Versions and tags\nThese are pure informations like current version of the API and supported versions.\nTags and categories are array of item, mostly used to filter APIs.\n\n### Visibililty\nVisibility can be:\n\n* public: everybody can see the complete API.\n* public with authorization: everybody sees just a part of the API, on the catalog's page (name, tags, categories and small desc.). Everybody can ask access to an admin of owner team.\n* private: Just authorized teams have access to the API.\n\n### Authorizations\nThe teams which have access to the API, in the case of visibility is private.\n\n### Description\nAPI description. Basically it can be written in markdown.\nThe description can be set from team asset.\n\n### Plans\nAn API needs a plan to be subscribed.\nPlan needs a name, possibly a description and an @ref:[otoroshi instance](../tenantusage/1-otoroshi.md).\n\nYou can define a plan as **default plan** as it's possible to **make it private** (only accessible by the producer team)\nIt's possible to **allow multiple APIkeys** for a plan.\n\nIt's important to choose a type of plan :\n\n* free without quotas: a plan with an unlimited number of calls per day and per month.\n* free with quotas: a plan with a limited number of calls per day and per month. Quotas will be set by default and can be overwritten.\n* quotas with limit: a priced plan with a limited number of calls per day and per month. Quotas will be set by default but can be overwritten. A fixed cost by month can be set. \n* quotas without limit: a priced plan with unlimited number of calls per day and per month. Quotas will be set by default but can be overwritten. A fixed cost by month can be set. The cost per additional requests can be set.\n* pay per use: a plan priced on usage. A fixed cost by month can be set. The cost per additional requests can be set.\n\n####Otoroshi, billing and security\nDepending on chosen plan type, certain custom properties may be accessibles.\n\n- Plan needs an Otoroshi instance to allow users to subscribe. After choosing an instance, a list of Otoroshi service groups is accessible to link daikoku api/plan with an Otoroshi service group.\n- As it's Otoroshi which manages apis, apikey quotas can be define.\n- Daikoku side, billing informations can be filled (billing period, cost per month, currency ...)\n- For security, you can force apikey rotation. it's an Otoroshi feature that will reset clientSecret every month with a grace period of 1 week (during this week both secrets works)\n- Subscription can be: \n  * Automatic: subscriptions will be granted automatically.\n  * Manual: subscriptions will require an acceptance by a team admin.\n- You can force the integration process :\n  * ApiKey: subscribers have access to an apikey to call api\n  * Automatic: Subscribers have just access to a token, which link to a real apikey,  accessible by admin api. It's a perfect solution to integrate automatically your apikey in your prod environment if rotation is activated.\n\n@@@ note { title='API key Metadata' }\nAs Otoroshi does, it's possible to add metadata on API keys. __Automatic metadata__ will be calculated and added after subscription validation. __Asked metadata__ will switch the plan subscription mode to manual then, on susbcription acceptation, a team admin will have to add the metadata manually. \n@@@\n\n### Swagger\nThe swagger can be provided as a url or just some content paste on the UI.\n\n### Testing\nYou can enable the testing for your API.\nClick on the `Generate a dedicated testing key in Otoroshi` to choose an otoroshi instance and and service group which is used to receive the testing APIkey.\n\n@@@warning\nMake sure this service descriptor is the right one for testing and not your production system !\n@@@\n\n### Documentation\nThe last tabs allows you to create a paginated documentation. Like description every pages can be written with markdown or set from asset.\n\n## Manage subscription\n\nOn the team APIs screen on your team back office, it's possible to manage for every APIs its subscriptions by clicking on the `key` button.\nYou can activate/deactivate API keys or update metadata."
  },
  {
    "name": "2-members.md",
    "id": "/producerusage/2-members.md",
    "url": "/producerusage/2-members.html",
    "title": "#Managing teams",
    "content": "#Managing teams\n\n###Create a new Team\nIn the home page, on the \"Your Teams\" component, click on the \"+\" button tio open a modal to create a new Team.\nIt's necessary to fill in the following fields :\n* Name: the public name of the the new team (it must be unique for the tenant)\n* Description: A quick description for the new team (Display in the all team page)\n* Team contact: the mail to contact the team\n* Team avatar: a link to the team avatar. It's possible to use gravatar (or an asset, once the team is created)\n* apiKeyVisibility: Minimum member permission to see and manage team apikeys. Default set to User.\n\nAfter creation, you will be redirected to the members page to managing them \n\n#Managing team members\nIn the backoffice team, click on the `Team members` entry, on the left.\n\n### Add a new member\nSimply select a user in the selector in the top left of the page. He will be notified that you want to add him to your team. You can see him in the \"pending\" tab, once he accept the invitation he'll appear on the members tab.\nYou will be notified as soon as he accepts or refuses the invitation.\n\n### Remove a member\nHover over member's avatar and click on the `delete` button (bin icon).\n\n### Update member permission\nHover over member's avatar  and click on the `manage permissions` button (user/cog icon).\nThen, choose:\n\n* admin: member can access everything.\n* api editor: member can't manage team but can create an api.\n* nothing: member can just subscribe another team api."
  },
  {
    "name": "2-subscriptions.md",
    "id": "/producerusage/2-subscriptions.md",
    "url": "/producerusage/2-subscriptions.html",
    "title": "#Managing API subscription",
    "content": "#Managing API subscription\n\nTeam administrator can access to API subscription by clicking on the `key` action on the table in team APIS page of your team back office.\n\n##Enable or Disable Apikeys\nBy clicking on the switch button of the `enabled` column, the subscription can be toggled and enabled/disable Otoroshi apikey.\n\n##Update Apikey properties\nOn the `Actions` column, the `Update metadata` button open a modal with a form\n* mandatory metadata: it's the plan `custom metadata` which are only be filled by an admin \n* additional metadata: Some non mandatory/automatic metadata\n* Custom Quotas: If you want override plan quotas for an apikey\n* Other custom props: \n  * read only: the Otoroshi API key can just call API with GET verb \n\n##Refresh subscription secret\nBy clicking on the `refresh` button, a new client secret will be generated and wil replace the Otoroshi client-secret immediately.\nThe subscription team admins will be informed by nootification and mail about the secret refresh."
  },
  {
    "name": "3-assets.md",
    "id": "/producerusage/3-assets.md",
    "url": "/producerusage/3-assets.html",
    "title": "Managing team assets",
    "content": "# Managing team assets\n\nIn the backoffice team, click on the `Team assets` entry, on the left, you should see the list of existing `assets`\n\n@@@ warning\nIf a `Something went wrong !!!` message is displayed, look a the @ref:[Tenant / Bucket configuration](../adminusage/1-tenants.md)\n@@@\n\n## Add a new assets\nSelect a file after click toh the `Select file` button, then the filename, title and content-type should be pre-filled.\nYou can overwrite these informations and add a description if you want.\nClick to the `Add asset` button to finalize the action.\nThis asset can be just used for this team."
  },
  {
    "name": "4-income.md",
    "id": "/producerusage/4-income.md",
    "url": "/producerusage/4-income.html",
    "title": "Team earnings",
    "content": "# Team earnings\n\nIn the backoffice team, click on the `Team income` entry, on the left.\nAnd you should see the list of the `team income`.\n\nEarnings are calculated by month and could be synchronized with otoroshi if data's not fresh.\n\nThe total earnings by month is display on top right of the board and below, you can see the total by API.\nAfter clicking on a api income, you can see the division by apikeys."
  },
  {
    "name": "index.md",
    "id": "/producerusage/index.md",
    "url": "/producerusage/index.html",
    "title": "Using Daikoku as api producer",
    "content": "# Using Daikoku as api producer\n\nNow we will see how to use Daikoku for basic tasks that will be useful for your day to day work with Daikoku.\n\n\n@@@ index\n\n* [managing apis](./1-apis.md)\n* [managing API subscription](./2-subscriptions.md)\n* [managing teams and members](./2-members.md)\n* [managing assets](./3-assets.md)\n* [team income](./4-income.md)\n\n@@@\n"
  },
  {
    "name": "quickstart.md",
    "id": "/quickstart.md",
    "url": "/quickstart.html",
    "title": "Try Daikoku in 5 minutes",
    "content": "# Try Daikoku in 5 minutes\nwhat you will need :\n\n* Docker\n* Docker-Compose\n* 5 minutes of free time\n\nYou can start a sandboxed environment with the following command : \n\n```sh\ncd demo\ndocker-compose up\n```\n\n## Log into the UI\n\nGo to <a href=\"http://daikoku.oto.tools/\" target=\"_blank\">http://daikoku.oto.tools/</a> and log in with the **following credential** admin@daikoku.io/Pa$$w0rd (The other users have the same password).\n"
  },
  {
    "name": "admin.md",
    "id": "/setup/admin.md",
    "url": "/setup/admin.html",
    "title": "Manage admin users",
    "content": "# Manage admin users\n\n## Create admin user after the first run\n\nAfter using the default super admin to the first connection to Daikoku, it can be a good idea to create a new super admin.\nGo to `settings (avatar icon) / Organizations settings`.\n\n@@@ div { .centered-img }\n<img src=\"../img/main_page_menu.png\" />\n@@@\n\nGo to the `Users` page, \nyou will see the list of registered users : \n\n@@@ div { .centered-img }\n<img src=\"../img/user_page.png\" />\n@@@\n\n\nNow, you can create a new user. Provide the informations about the admin user you are creating : \n\n@@@ div { .centered-img }\n<img src=\"../img/new_user.png\" />\n@@@\n\nActivate `Daikoku admin.`\nClick on `Create`.\n\nNow, you can delete the initially generated `Super admin`, confirm, then logout, login with the admin user you have just created and the danger popup will go away.\n\n## Delete admin user\n\nGo to `settings (avatar icon) / Organizations settings / Users`, you will see a list of users that you can discard. \nJust hover the avatar and click on the `Remove User` button (trash icon) and confirm that you actually want to delete an admin user.\n\nYou may also just toggle off the admin status of the user on clicking the `toggle admin status` button (shield icon).\n\n\n"
  },
  {
    "name": "index.md",
    "id": "/setup/index.md",
    "url": "/setup/index.html",
    "title": "Setup Daikoku",
    "content": "# Setup Daikoku\n\nNow that Daikoku is running, you are ready to log into the Daikoku UI and setup your instance. Just go to: <a href=\"http://daikoku.oto.tools:8080\" target=\"_blank\">http://daikoku.oto.tools:8080</a>\n\nYou will see the following page :\n \n@@@ div { .centered-img }\n<img src=\"../img/home_page.png\" />\n@@@\n\nNow click on the connect button and you will see the login page :\n\n@@@ div { .centered-img }\n<img src=\"../img/login_page.png\" />\n@@@\n\n\n@@@ warning\nUse the credentials generated in Daikoku **logs** during **first run**.\n@@@\n\n(Obviously, this URL might change dependending on the configuration you provided to Daikoku).\n\nOnce logged in, the first screen you'll see should look like :\n\n@@@ div { .centered-img #first-login }\n<img src=\"../img/main_page.png\" />\n@@@\n\n@@@ index\n\n* [create admins](./admin.md)\n\n@@@\n"
  },
  {
    "name": "1-otoroshi.md",
    "id": "/tenantusage/1-otoroshi.md",
    "url": "/tenantusage/1-otoroshi.html",
    "title": "Managing Otoroshi instances",
    "content": "# Managing Otoroshi instances\n\nGo to `settings/Organizations settings` and click `Otoroshi instances` on the left menu.\n\nAnd you should see the list of existing `Otoroshi instances`.\n\n## Add a new Otoroshi\n\nClick on the `Create` button.\nA Otoroshi instance is really simple to create. Just fill Otoroshi's url (otoroshi-api URL, not client 😉), the host and credentials.\n\n## Update an existing instance\n\nTo update an Otoroshi instance, just click the `Update` button (Pen icon). You can modify the otoroshi url, the host or credentials.\n\n## Remove an existing instance\n\nTo delete an Otoroshi instances, just click the `Delete` button (trash icon) and confirm the command."
  },
  {
    "name": "1.5-initialize.md",
    "id": "/tenantusage/1.5-initialize.md",
    "url": "/tenantusage/1.5-initialize.html",
    "title": "Initialize Tenant from Otoroshi instances",
    "content": "# Initialize Tenant from Otoroshi instances\nYou perhaps have a previous instance of Otoroshi, whiche contains services and lot of apikeys. This page have been created to easily import service group as API and apikeys as subscriptions in a tenant of your Daikoku instance.\n\nGo to `settings/Organizations settings` and click `Initialization` on the left menu.\n\nNow, it's easy as just follow steps.\n\n## Select Otoroshi instance\n\nJust select a previously created Otoroshi instance to begin.\n\n## Select the step\n\nYou can begin to import Otoroshi service groups or just Otoroshi apikeys\n\n## Select Service group to import\n\nYou have to choose which services you want to import. It's completly possible to change the API name but no necessary. \nYou have to choose a team to admin the crated API. If the team doesn't exist, you can create a team in this screen.\nYour action is just, for the moment, to tack the api to create, the creation will be effective later.  \n_notice: Every choice you make are saved on your local storage in case of problem._\n\n## Recap and creation\n\nThe next screen list all API to create. If your agree with this, you can click on the `create` button to launch the APIs creation.\n\n## Select Service group to import\n\nYou have to choose which apikeys you want to import.\nYou have to choose an api with a plan and a team for every apikeys. If the plan does't exists, you can create a plan in this screen (_notice: it will a FreePlan but you can change it after creation_).  \nIf the team doesn't exist, you can create a team in this screen.\nYour action is just, for the moment, to stack the apikey to create, the creation will be effective later.  \n_notice: Every choice you make are saved on your local storage in case of problem._\n\n## Recap and creation\n\nThe next screen list all subscriptions to create. If your agree with this, you can click on the create button to launch the subscriptios creation.\n\n## Done\n\nAll the selected APIs and apikeys are created. You have certainly to go to API page to update some informations because APIs are just created with default informations, just name and plan.\nIf you have created some teams, be aware that you are the only member of those teams.\nYou can import APIS and apikeys from another Otorshi instance if you wish."
  },
  {
    "name": "2-teams.md",
    "id": "/tenantusage/2-teams.md",
    "url": "/tenantusage/2-teams.html",
    "title": "Managing teams",
    "content": "# Managing teams\n\nGo to `settings/Organizations settings` and then click `teams` on the left menu. You should see the list of existing `teams`\n\n## Add a new team\n\nClick on the `Create` button.\nA team needs the folowing informations :\n\n* Tenant (By default, the current tenant)\n* Name (Name need to be unique for the tenant)\n* Description, a small text to describe the team main page.\n* Team contact, an email address for a simple contact\n* Team avatar, it could be an URl or an asset from the object manager\n* Metadata, some extra informations that will be sent with the api calls with team apikeys\n\n## Update an existing team\nHover over team's avatar and click the `update` button (Pen icon). All the informations filled during the team creation can be overwritten.\n\n## Delete an existing team\n\nHover over team's avatar and click the `delete` button (Bin icon) and confirm the command.\n\n## Manage team members\n\nHover over team's avatar and click the `members` button (Users icons). You will redirect to team's members page.\nYou can refer to the @ref:[managing members](../producerusage/2-members.md)\n\n"
  },
  {
    "name": "3-assets.md",
    "id": "/tenantusage/3-assets.md",
    "url": "/tenantusage/3-assets.html",
    "title": "Managing assets",
    "content": "# Managing assets\n\nGo to `settings/Organizations settings` and then click `Tenant assets` on the left menu, you should see the list of existing `assets`\n\n@@@ warning\nIf a `Something went wrong !!!` message is displayed, look a the @ref:[Tenant / Bucket configuration](../adminusage/1-tenants.md)\n@@@\n\n## Add a new assets\nSelect a file after you click on the `Select file` button, then provide filename, title and content-type should be pre-filled.\nYou can overwrite these informations and add a description if you want to.\nClick to the `Add asset` button to finalize this action.\nThis asset can be used for the tenant and the team (avatar, css file, js file ...)\n\n\n"
  },
  {
    "name": "4-messages.md",
    "id": "/tenantusage/4-messages.md",
    "url": "/tenantusage/4-messages.html",
    "title": "User messages",
    "content": "# User messages\n\nA user can send a message to whole tenant admins. In fact, all members of the tenant admin team can reply to user.\n\nGo to `settings/Organizations settings` and then click `messages` on the left menu, you should see the list of opened conversations. \n\n## reply to message\nIf you receive a new message, conversation  show  you a notification woith the count of unread message. Click on conversation to open message editor and reply to user.\n\n## Close a conversation\nTo close a conversation just click on `trash` button of conversation on the left panel.\nIt's possible to get closed messages on clicking `load previous message` button on the opened conversation.\n\n## Start a new conversation\n\nJust select a user in the selector to start a new  conversation.\n"
  },
  {
    "name": "index.md",
    "id": "/tenantusage/index.md",
    "url": "/tenantusage/index.html",
    "title": "Using Daikoku as Tenant admin",
    "content": "# Using Daikoku as Tenant admin\n\nNow we will see how to use Daikoku as tenant admin.\n\n@@@ index\n\n* [managing Otoroshi instances](./1-otoroshi.md)\n* [initialize tenant from otoroshi instance](./1.5-initialize.md)\n* [managing teams](./2-teams.md)\n* [managing assets](./3-assets.md)\n* [user messages](./4-messages.md)\n\n@@@\n"
  }
]