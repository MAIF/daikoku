daikoku {

  mode = "prod"
  mode = ${?DAIKOKU_MODE}
  signingKey = "secret"
  signingKey = ${?DAIKOKU_SIGNING_KEY}

  exposedOn = ${http.port}
  exposedOn = ${?DAIKOKU_EXPOSED_ON}

  api {
    type = "local"
    type = ${?DAIKOKU_API_TYPE}
    key = "secret"
    key = ${?DAIKOKU_API_KEY}
    headerName = "Otoroshi-Claim"
    headerName = ${?DAIKOKU_API_HEADERNAME}
    headerSecret = "secret"
    headerSecret = ${?DAIKOKU_API_HEADERSECRET}
  }

  init {
    host = "localhost"
    host = ${?DAIKOKU_INIT_HOST}
    admin {
      name = "Super admin"
      name = ${?DAIKOKU_INIT_ADMIN_NAME}
      email = "admin@daikoku.io"
      email = ${?DAIKOKU_INIT_ADMIN_EMAIL}
      password = ${?DAIKOKU_INIT_ADMIN_PASSWORD}
    }
    data {
      from = ${?DAIKOKU_INIT_DATA_FROM}
      headers = {}
    }
  }

  snowflake {
    seed = 0
    seed = ${?INSTANCE_NUMBER}
  }

  tenants {
    provider = "local" # can be local, header, hostname
    provider = ${?DAIKOKU_TENANT_PROVIDER}
  }

  exposition {
    provider = "none"
    provider = ${?DAIKOKU_EXPOSITION_PROVIDER}
    otoroshi {
      stateHeaderName = "Otoroshi-State"
      stateHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_HEADER_NAME}
      stateRespHeaderName = "Otoroshi-State-Resp"
      stateRespHeaderName = ${?DAIKOKU_EXPOSITION_OTOROSHI_STATE_RESP_HEADER_NAME}
    }
  }

  otoroshi {
    groups {
      namePrefix = ${?DAIKOKU_OTOROSHI_GROUPS_NAME_PREFIX}
      idPrefix = ${?DAIKOKU_OTOROSHI_GROUPS_ID_PREFIX}
    }
    sync {
      interval = 3600000
      master = false
      master = ${?DAIKOKU_OTOROSHI_SYNC_MASTER}
      key = "secret"
      key = ${?DAIKOKU_OTOROSHI_SYNC_KEY}
      cron = false
      cron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}
      instance = ${?INSTANCE_NUMBER}
    }
  }

  stats {
    sync {
      interval = 3600000
      cron = false
      cron = ${?DAIKOKU_OTOROSHI_SYNC_CRON}
    }
    call {
      interval = 600000
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/daikoku"
  uri = ${?MONGODB_URI}
  uri = ${?MONGODB_ADDON_URI}
}


http.port = 8080
http.port = ${?PORT}
https.port = disabled
https.port = ${?HTTPS_PORT}

play {
  application.loader = "fr.maif.otoroshi.daikoku.DaikokuLoader"
  i18n.langs=[ "en" , "fr" ]
  modules {}
  filters {
    enabled = []
  }
  http {
    filters = play.api.http.NoHttpFilters
    secret {
      key = "secret"
      key = ${?PLAY_CRYPTO_SECRET}
    }
    session = {
      cookieName = "daikoku-session"
      cookieName = ${?DAIKOKU_SESSION_NAME}
      secure = false
      secure = ${?DAIKOKU_SESSION_SECURE}
      maxAge = 259200000
      maxAge = ${?DAIKOKU_SESSION_MAXAGE}
      httpOnly = true
      httpOnly = ${?DAIKOKU_SESSION_HTTPONLY}
      sameSite = "lax"
      sameSite = ${?DAIKOKU_SESSION_SAMESITE}
      domain = null
      domain = ${?DAIKOKU_SESSION_DOMAIN}
      path = ${play.http.context}
      jwt {
        signatureAlgorithm = "HS256"
        expiresAfter = ${play.http.session.maxAge}
        clockSkew = 5 minutes
        dataClaim = "data"
      }
    }
  }
  server {
    akka {
      requestTimeout = 60s
    }
    http {
      port = ${http.port}
      idleTimeout = 60s
    }
    https {
      port = ${https.port}
      keyStore {
        path=${?HTTPS_KEYSTORE_PATH}
        type=${?HTTPS_KEYSTORE_TYPE}
        password=${?HTTPS_KEYSTORE_PASSWORD}
        algorithm=${?HTTPS_KEYSTORE_ALGO}
      }
    }
  }
}
