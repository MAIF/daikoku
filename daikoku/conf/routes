### NoDocs ###
GET     /assets/*file                                   controllers.Assets.versioned(path="/public", file: Asset)

GET     /_/                                             fr.maif.otoroshi.daikoku.ctrls.HomeController.cmsPageByPath(path="")
GET     /_/*path                                        fr.maif.otoroshi.daikoku.ctrls.HomeController.cmsPageByPath(path)
GET     /cms/pages/:id                                  fr.maif.otoroshi.daikoku.ctrls.HomeController.cmsPageById(id)
GET     /api/cms/pages/:id/diffs/:diffId                fr.maif.otoroshi.daikoku.ctrls.HomeController.cmsDiffById(id, diffId)
POST    /api/cms/pages/:id/diffs/:diffId                fr.maif.otoroshi.daikoku.ctrls.HomeController.restoreDiff(id, diffId)
POST    /api/cms/download                               fr.maif.otoroshi.daikoku.ctrls.HomeController.download()
POST    /api/cms/import                                 fr.maif.otoroshi.daikoku.ctrls.HomeController.importFromZip()
POST    /api/cms/pages/:pageName                        fr.maif.otoroshi.daikoku.ctrls.HomeController.createCmsPageWithName(pageName)
POST    /api/cms/pages                                  fr.maif.otoroshi.daikoku.ctrls.HomeController.createCmsPage()
DELETE  /api/cms/pages/:id                              fr.maif.otoroshi.daikoku.ctrls.HomeController.deleteCmsPage(id)
GET     /api/cms/pages/:id                              fr.maif.otoroshi.daikoku.ctrls.HomeController.getCmsPage(id)

GET     /                                               fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /robots.txt                                     fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /signup                                         fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /reset                                          fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /teams                                          fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /organizations                                  fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /notifications                                  fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /apis                                           fr.maif.otoroshi.daikoku.ctrls.HomeController.index()
GET     /teams/*path                                    fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /daikoku/*path                                  fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /settings/*path                                 fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /notifications/*path                            fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /apis/*path                                     fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /consumptions/*path                             fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)
GET     /health                                         fr.maif.otoroshi.daikoku.ctrls.HomeController.health()
GET     /api/versions/_daikoku                          fr.maif.otoroshi.daikoku.ctrls.HomeController.getDaikokuVersion()

GET     /logout                                         fr.maif.otoroshi.daikoku.ctrls.LoginController.logout()
GET     /api/2fa                                        fr.maif.otoroshi.daikoku.ctrls.LoginController.verifyCode(token: Option[String] ?= None, code: Option[String] ?= None)
PUT     /api/2fa                                        fr.maif.otoroshi.daikoku.ctrls.LoginController.reset2fa()
POST    /account/reset                                  fr.maif.otoroshi.daikoku.ctrls.LoginController.askForPasswordReset()
GET     /account/reset                                  fr.maif.otoroshi.daikoku.ctrls.LoginController.passwordResetValidation()
GET     /account/validate                               fr.maif.otoroshi.daikoku.ctrls.LoginController.createUserValidation()
POST    /account                                        fr.maif.otoroshi.daikoku.ctrls.LoginController.createUser()
GET     /auth/:provider/login                           fr.maif.otoroshi.daikoku.ctrls.LoginController.loginPage(provider)
POST    /auth/:provider/callback                        fr.maif.otoroshi.daikoku.ctrls.LoginController.login(provider)
GET     /auth/:provider/callback                        fr.maif.otoroshi.daikoku.ctrls.LoginController.loginGet(provider)
POST    /api/auth/ldap/_check                           fr.maif.otoroshi.daikoku.ctrls.LoginController.checkLdapConnection()

GET     /api/me/teams                                   fr.maif.otoroshi.daikoku.ctrls.ApiController.myTeams()
GET     /api/me/teams/own                               fr.maif.otoroshi.daikoku.ctrls.ApiController.myOwnTeam()
GET     /api/me/teams/:id                               fr.maif.otoroshi.daikoku.ctrls.ApiController.oneOfMyTeam(id)

GET     /api/me                                         fr.maif.otoroshi.daikoku.ctrls.ApiController.me()
DELETE  /api/me                                         fr.maif.otoroshi.daikoku.ctrls.UsersController.deleteSelfUser()
GET     /api/me/_2fa                                    fr.maif.otoroshi.daikoku.ctrls.UsersController.get2faQrCode()
GET     /api/me/_2fa/enable                             fr.maif.otoroshi.daikoku.ctrls.UsersController.enable2fa(code: Option[String] ?= None)
DELETE  /api/me/_2fa                                    fr.maif.otoroshi.daikoku.ctrls.UsersController.disable2fa()
POST    /api/me/invitation/_check                       fr.maif.otoroshi.daikoku.ctrls.UsersController.checkTokenInvitation()
DELETE  /api/me/invitation                              fr.maif.otoroshi.daikoku.ctrls.UsersController.removeInvitation()
PUT     /api/me/password                                fr.maif.otoroshi.daikoku.ctrls.UsersController.updatePassword()

GET     /api/me/notifications                           fr.maif.otoroshi.daikoku.ctrls.NotificationController.myUntreatedNotifications(page: Int ?= 0, pageSize: Int ?= 10)
GET     /api/me/notifications/all                       fr.maif.otoroshi.daikoku.ctrls.NotificationController.myNotifications(page: Int ?= 0, pageSize: Int ?= 10)
GET     /api/me/notifications/unread-count              fr.maif.otoroshi.daikoku.ctrls.NotificationController.myUnreadNotificationsCount()

GET     /api/me/visible-apis/:humanReadableId/:version          fr.maif.otoroshi.daikoku.ctrls.ApiController.getVisibleApi(humanReadableId, version)
GET     /api/me/visible-apis/:id                                fr.maif.otoroshi.daikoku.ctrls.ApiController.getVisibleApiWithId(id)
GET     /api/me/teams/:teamId/visible-apis/:apiId/:version      fr.maif.otoroshi.daikoku.ctrls.ApiController.getTeamVisibleApis(teamId, apiId, version)
GET     /api/apis/:apiId/_root                                  fr.maif.otoroshi.daikoku.ctrls.ApiController.getRootApi(apiId)
POST    /api/apis/:apiId/access                                 fr.maif.otoroshi.daikoku.ctrls.ApiController.askForApiAccess(apiId)
PUT     /api/apis/:apiId/stars                                  fr.maif.otoroshi.daikoku.ctrls.ApiController.toggleStar(apiId)
POST    /api/apis/_names                                        fr.maif.otoroshi.daikoku.ctrls.ApiController.verifyNameUniqueness()
GET     /api/apis/:apiId/:version/posts                         fr.maif.otoroshi.daikoku.ctrls.ApiController.getPosts(apiId, version, offset: Option[Int], limit: Option[Int])
GET     /api/apis/:apiId/issues                                 fr.maif.otoroshi.daikoku.ctrls.ApiController.getIssues(apiId)
GET     /api/apis/:apiId/issues/:issueId/comments               fr.maif.otoroshi.daikoku.ctrls.ApiController.getComments(apiId, issueId)
GET     /api/apis/:apiId/issues/:issueId                        fr.maif.otoroshi.daikoku.ctrls.ApiController.getIssue(apiId, issueId)
GET     /api/apis/:apiId/default_version                        fr.maif.otoroshi.daikoku.ctrls.ApiController.getDefaultApiVersion(apiId)
GET     /api/apis/:apiId/:version/doc                           fr.maif.otoroshi.daikoku.ctrls.ApiController.getDocumentationDetails(apiId, version)

POST    /api/teams/:teamId/subscription/:id/consumption/_sync   fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.syncSubscriptionConsumption(id, teamId)
POST    /api/teams/:teamId/apis/:apiId/consumption/_sync        fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.syncApiConsumption(apiId, teamId)
POST    /api/teams/:teamId/billing/_sync                        fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.syncTeamBilling(teamId)
POST    /api/teams/:teamId/income/_sync                         fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.syncTeamIncome(teamId)
GET     /api/teams/:teamId/subscription/:id/consumption         fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.getSubscriptionConsumption(id, teamId, from: Option[Long] ?= None, to: Option[Long] ?= None)
GET     /api/teams/:teamId/apis/:apiId/plan/:planId/consumption fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.getGroupConsumption(teamId, apiId, planId, from: Option[Long] ?= None, to: Option[Long] ?= None)
### GET     /api/teams/:teamId/apis/:apiId/consumption              fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.getApiConsumption(teamId, apiId, from: Option[Long] ?= None, to: Option[Long] ?= None) UNUSED FROM NOW
GET     /api/teams/:teamId/consumptions                         fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.consumptions(teamId, from: Option[Long] ?= None, to: Option[Long] ?= None)
GET     /api/teams/:teamId/billings                             fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.billings(teamId, from: Option[Long] ?= None, to: Option[Long] ?= None)
GET     /api/teams/:teamId/income                               fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.income(teamId, from: Option[Long] ?= None, to: Option[Long] ?= None)
GET     /api/teams/:teamId/subscription/:subscriptionId/quotas  fr.maif.otoroshi.daikoku.ctrls.ConsumptionController.getApiKeyQuotasWithSubscriptionId(teamId, subscriptionId)

GET     /api/me/subscriptions/:apiId/:version                   fr.maif.otoroshi.daikoku.ctrls.ApiController.getMyTeamsApiSubscriptions(apiId, version)
PUT     /api/apis/:apiId/subscriptions/:apiKeyId                fr.maif.otoroshi.daikoku.ctrls.ApiController.extendApiKey(apiId, apiKeyId)
POST    /api/apis/:apiId/subscriptions                          fr.maif.otoroshi.daikoku.ctrls.ApiController.askForApiKey(apiId)
GET     /api/apis/:apiId/:version/subscriptions/teams/:teamId   fr.maif.otoroshi.daikoku.ctrls.ApiController.getApiSubscriptionsForTeam(apiId, teamId, version, planId: Option[String] ?= None)
DELETE  /api/subscriptions/:subscriptionId/teams/:teamId/_delete fr.maif.otoroshi.daikoku.ctrls.ApiController.deleteApiSubscription(teamId, subscriptionId)

GET     /api/subscriptions/teams/:teamId                        fr.maif.otoroshi.daikoku.ctrls.ApiController.getSubscriptionsOfTeam(teamId)
GET     /api/apis/:apiId/pages/:id/content                      fr.maif.otoroshi.daikoku.ctrls.ApiController.getDocumentationPageRemoteContent(apiId, id)
GET     /api/apis/:apiId/pages/:id                              fr.maif.otoroshi.daikoku.ctrls.ApiController.getDocumentationPage(apiId, id)
POST    /api/teams/:teamId/subscriptions/:id/name               fr.maif.otoroshi.daikoku.ctrls.ApiController.updateApiSubscriptionCustomName(teamId, id)
PUT		/api/teams/:teamId/subscriptions/:id/_archive           fr.maif.otoroshi.daikoku.ctrls.ApiController.toggleApiSubscription(teamId, id, enabled: Option[Boolean] ?= Some(false))
POST	/api/teams/:teamId/subscriptions/:id/_makeUnique        fr.maif.otoroshi.daikoku.ctrls.ApiController.makeUniqueSubscription(teamId, id)
PUT		/api/teams/:teamId/subscriptions/:id                    fr.maif.otoroshi.daikoku.ctrls.ApiController.updateApiSubscription(teamId, id)
PUT		/api/teams/:teamId/subscriptions/:id/_archiveByOwner    fr.maif.otoroshi.daikoku.ctrls.ApiController.toggleApiSubscriptionByApiOwner(teamId, id, enabled: Option[Boolean] ?= Some(false))
DELETE  /api/teams/:teamId/subscriptions/_clean			        fr.maif.otoroshi.daikoku.ctrls.ApiController.cleanArchivedSubscriptions(teamId)
POST    /api/teams/:teamId/subscriptions/:id/_rotation          fr.maif.otoroshi.daikoku.ctrls.ApiController.toggleApiKeyRotation(teamId, id)
POST    /api/teams/:teamId/subscriptions/:id/_refresh           fr.maif.otoroshi.daikoku.ctrls.ApiController.regenerateApiKeySecret(teamId, id)
POST    /api/subscriptions/_init                                fr.maif.otoroshi.daikoku.ctrls.ApiController.initSubscriptions()
POST    /api/apis/_init                                         fr.maif.otoroshi.daikoku.ctrls.ApiController.initApis()
GET     /api/teams/:teamId/subscription/:id/informations        fr.maif.otoroshi.daikoku.ctrls.ApiController.getSubscriptionInformations(teamId, id)
GET     /api/teams/:teamId/apis/:apiId/:version/subscriptions   fr.maif.otoroshi.daikoku.ctrls.ApiController.getApiSubscriptions(teamId, apiId, version)
POST    /api/teams/:teamId/apis/:apiId/posts                    fr.maif.otoroshi.daikoku.ctrls.ApiController.createPost(teamId, apiId)
PUT     /api/teams/:teamId/apis/:apiId/posts/:postId            fr.maif.otoroshi.daikoku.ctrls.ApiController.updatePost(teamId, apiId, postId)
DELETE  /api/teams/:teamId/apis/:apiId/posts/:postId            fr.maif.otoroshi.daikoku.ctrls.ApiController.removePost(teamId, apiId, postId)
POST    /api/teams/:teamId/apis/:apiId/issues                   fr.maif.otoroshi.daikoku.ctrls.ApiController.createIssue(teamId, apiId)
PUT     /api/teams/:teamId/apis/:apiId/issues/:issueId          fr.maif.otoroshi.daikoku.ctrls.ApiController.updateIssue(teamId, apiId, issueId)
POST    /api/teams/:teamId/apis/:apiId/versions                 fr.maif.otoroshi.daikoku.ctrls.ApiController.createVersion(teamId, apiId)
GET     /api/teams/:teamId/apis/:apiId/versions                 fr.maif.otoroshi.daikoku.ctrls.ApiController.getAllApiVersions(teamId, apiId)
GET     /api/teams/:teamId/apis/:apiId/:version/plans           fr.maif.otoroshi.daikoku.ctrls.ApiController.getAllPlan(teamId, apiId, version)
POST    /api/teams/:teamId/apis/:apiId/plans                    fr.maif.otoroshi.daikoku.ctrls.ApiController.clonePlan(teamId, apiId)
GET     /api/teams/:teamId/apis/:apiId/:version/access          fr.maif.otoroshi.daikoku.ctrls.ApiController.getMyTeamsStatusAccess(teamId, apiId, version)
GET     /api/teams/:teamId/subscribed-apis                      fr.maif.otoroshi.daikoku.ctrls.ApiController.subscribedApis(teamId)
GET     /api/teams/:teamId/apis/:apiId/:version/swagger.json    fr.maif.otoroshi.daikoku.ctrls.ApiController.apiSwagger(teamId, apiId, version)
GET     /api/teams/:teamId/apis/:apiId/:version/swagger         fr.maif.otoroshi.daikoku.ctrls.ApiController.apiSwagger(teamId, apiId, version)
GET     /api/teams/:teamId/apis/:apiId/:version                 fr.maif.otoroshi.daikoku.ctrls.ApiController.apiOfTeam(teamId, apiId, version)
PUT     /api/teams/:teamId/apis/:id/:version                    fr.maif.otoroshi.daikoku.ctrls.ApiController.updateApiOfTeam(teamId, id, version)
POST    /api/teams/:teamId/apis/:id/_transfer                   fr.maif.otoroshi.daikoku.ctrls.ApiController.transferApiOwnership(teamId, id)
DELETE  /api/teams/:teamId/apis/:id                             fr.maif.otoroshi.daikoku.ctrls.ApiController.deleteApiOfTeam(teamId, id)
POST    /api/teams/:teamId/apis                                 fr.maif.otoroshi.daikoku.ctrls.ApiController.createApiOfTeam(teamId)
GET     /api/teams/:teamId/apis                                 fr.maif.otoroshi.daikoku.ctrls.ApiController.apisOfTeam(teamId)
GET     /api/teams/:teamId/apis/:apiId/:version/pages           fr.maif.otoroshi.daikoku.ctrls.ApiController.getAllApiDocumentation(teamId, apiId, version)
PUT     /api/teams/:teamId/apis/:apiId/:version/pages           fr.maif.otoroshi.daikoku.ctrls.ApiController.cloneDocumentation(teamId, apiId, version)
GET     /api/categories                                         fr.maif.otoroshi.daikoku.ctrls.ApiController.categories()
DELETE  /api/teams/:teamId/pages/:pageId                        fr.maif.otoroshi.daikoku.ctrls.ApiController.deleteDocPage(teamId, pageId)
PUT     /api/teams/:teamId/pages/:pageId                        fr.maif.otoroshi.daikoku.ctrls.ApiController.saveDocPage(teamId, pageId)
POST    /api/teams/:teamId/pages                                fr.maif.otoroshi.daikoku.ctrls.ApiController.createDocPage(teamId)

GET     /api/me/messages/admin                          fr.maif.otoroshi.daikoku.ctrls.MessageController.myAdminMessages(date: Option[Long] ?= None)
GET     /api/me/messages                                fr.maif.otoroshi.daikoku.ctrls.MessageController.myMessages(chat: Option[String] ?= None, date: Option[Long] ?= None)
POST    /api/messages/_send                             fr.maif.otoroshi.daikoku.ctrls.MessageController.sendMessage()
GET     /api/messages/_sse                              fr.maif.otoroshi.daikoku.ctrls.MessageController.sse()
PUT     /api/messages/:chatId/_read                     fr.maif.otoroshi.daikoku.ctrls.MessageController.setMessageRead(chatId)
DELETE  /api/messages/:chatId                           fr.maif.otoroshi.daikoku.ctrls.MessageController.closeChat(chatId)
GET     /api/messages/:chatId/last-date                 fr.maif.otoroshi.daikoku.ctrls.MessageController.getLastChatDate(chatId, date: Option[Long] ?= None)

DELETE  /api/teams/:teamId/assets/:assetId              fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.deleteAsset(teamId, assetId)
GET     /api/teams/:teamId/assets/:assetId              fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.getAsset(teamId, assetId)
GET     /team-assets/:teamId/:assetId                   fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.getAsset(teamId, assetId)
GET     /api/teams/:teamId/assets                       fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.listAssets(teamId)
POST    /api/teams/:teamId/assets                       fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.storeAsset(teamId)
POST    /api/teams/:teamId/assets/:assetId/_replace     fr.maif.otoroshi.daikoku.ctrls.TeamAssetsController.replaceAsset(teamId, assetId)

DELETE  /tenant-assets/:assetId                         fr.maif.otoroshi.daikoku.ctrls.TenantAssetsController.deleteAsset(assetId)
GET     /tenant-assets/:assetId                         fr.maif.otoroshi.daikoku.ctrls.TenantAssetsController.getAsset(assetId)
GET     /tenant-assets                                  fr.maif.otoroshi.daikoku.ctrls.TenantAssetsController.listAssets()
POST    /tenant-assets                                  fr.maif.otoroshi.daikoku.ctrls.TenantAssetsController.storeAsset()
POST    /tenant-assets/:assetId/_replace                fr.maif.otoroshi.daikoku.ctrls.TenantAssetsController.replaceAsset(assetId)

GET     /user-avatar/:tenantId/:assetId                 fr.maif.otoroshi.daikoku.ctrls.UserAssetsController.getAvatar(tenantId, assetId)
POST    /user-avatar                                    fr.maif.otoroshi.daikoku.ctrls.UserAssetsController.storeAvatar()

GET     /asset-thumbnails/:assetId                      fr.maif.otoroshi.daikoku.ctrls.AssetsThumbnailController.getAsset(assetId)
POST    /asset-thumbnails/:assetId                      fr.maif.otoroshi.daikoku.ctrls.AssetsThumbnailController.storeAsset(assetId)

GET     /api/tenants/:tenantId/otoroshis/simplified         fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshisSettingsSimple(tenantId)
GET     /api/tenants/:tenantId/otoroshis                    fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshisSettings(tenantId)
GET     /api/tenants/:tenantId/otoroshis/:id                fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiSettings(tenantId, id)
DELETE  /api/tenants/:tenantId/otoroshis/:id                fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.deleteOtoroshiSettings(tenantId, id)
PUT     /api/tenants/:tenantId/otoroshis/:id                fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.saveOtoroshiSettings(tenantId, id, skipValidation: Boolean ?= false)
POST    /api/tenants/:tenantId/otoroshis                    fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.createOtoroshiSettings(tenantId, skipValidation: Boolean ?= false)
POST    /api/teams/:teamId/testing/apikeys                  fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.createTestingApiKey(teamId)
PUT     /api/teams/:teamId/testing/apikeys                  fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.updateTestingApiKey(teamId)
DELETE  /api/teams/:teamId/testing/apikeys                  fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.deleteTestingApiKey(teamId)
POST    /api/teams/:teamId/testing/:apiId/call              fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.fakeApiCall(teamId, apiId)
GET     /api/teams/:teamId/tenant/otoroshis/:oto/groups     fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiGroupsFor(teamId, oto)
GET     /api/tenants/:tenantId/otoroshis/:oto/groups        fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiGroupsForTenant(tenantId, oto)
GET     /api/tenants/:tenantId/otoroshis/:oto/services      fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiServicesForTenant(tenantId, oto)
GET     /api/tenants/:tenantId/otoroshis/:oto/routes        fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiRoutesForTenant(tenantId, oto)
GET     /api/teams/:teamId/tenant/otoroshis/:oto/services   fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiServicesFor(teamId, oto)
GET     /api/teams/:teamId/tenant/otoroshis/:oto/routes     fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiRoutesFor(teamId, oto)
GET     /api/tenants/:tenantId/otoroshis/:oto/apikeys       fr.maif.otoroshi.daikoku.ctrls.OtoroshiSettingsController.otoroshiApiKeysForTenant(tenantId, oto)

GET     /api/teams                                      fr.maif.otoroshi.daikoku.ctrls.TeamController.teams()
POST    /api/teams                                      fr.maif.otoroshi.daikoku.ctrls.TeamController.createTeam()
GET     /api/teams/admin                                fr.maif.otoroshi.daikoku.ctrls.TeamController.tenantAdminTeam()
GET     /api/teams/:teamId                              fr.maif.otoroshi.daikoku.ctrls.TeamController.team(teamId)
PUT     /api/teams/:teamId                              fr.maif.otoroshi.daikoku.ctrls.TeamController.updateTeam(teamId)
DELETE  /api/teams/:teamId                              fr.maif.otoroshi.daikoku.ctrls.TeamController.deleteTeam(teamId)
GET     /api/teams/:teamId/_full                        fr.maif.otoroshi.daikoku.ctrls.TeamController.teamFull(teamId)
POST    /api/teams/:teamId/join                         fr.maif.otoroshi.daikoku.ctrls.TeamController.askForJoinTeam(teamId)
DELETE  /api/teams/:teamId/members/:userId/invitations  fr.maif.otoroshi.daikoku.ctrls.TeamController.removeInvitation(teamId, userId)
POST    /api/teams/:teamId/members/_permission          fr.maif.otoroshi.daikoku.ctrls.TeamController.updateTeamMembersPermission(teamId)
DELETE  /api/teams/:teamId/members/:id                  fr.maif.otoroshi.daikoku.ctrls.TeamController.removeMemberFromTeam(teamId, id)
GET     /api/teams/:teamId/members/:id                  fr.maif.otoroshi.daikoku.ctrls.TeamController.memberOfTeam(teamId, id)
POST    /api/teams/:teamId/members                      fr.maif.otoroshi.daikoku.ctrls.TeamController.addMembersToTeam(teamId)
GET     /api/teams/:teamId/members                      fr.maif.otoroshi.daikoku.ctrls.TeamController.membersOfTeam(teamId)
POST    /api/teams/:teamId/unchecked-members            fr.maif.otoroshi.daikoku.ctrls.TeamController.addUncheckedMembersToTeam(teamId)
GET     /api/teams/:teamId/pending-members              fr.maif.otoroshi.daikoku.ctrls.TeamController.pendingMembersOfTeam(teamId)
GET     /api/teams/:teamId/home                         fr.maif.otoroshi.daikoku.ctrls.TeamController.teamHome(teamId)
GET     /api/teams/:teamId/ldap/users/:email            fr.maif.otoroshi.daikoku.ctrls.TeamController.checkUser(teamId, email)
POST    /api/teams/:teamId/users/_search                fr.maif.otoroshi.daikoku.ctrls.TeamController.findUserByAttributes(teamId)
POST    /api/teams/:teamId/ldap/users                   fr.maif.otoroshi.daikoku.ctrls.TeamController.createLDAPUser(teamId)

GET     /api/teams/:teamId/notifications/unread-count   fr.maif.otoroshi.daikoku.ctrls.NotificationController.unreadNotificationsCountOfTeam(teamId)
GET     /api/teams/:teamId/notifications/all            fr.maif.otoroshi.daikoku.ctrls.NotificationController.notificationOfTeam(teamId, page: Int ?= 0, pageSize: Int ?= 10)
GET     /api/teams/:teamId/notifications                fr.maif.otoroshi.daikoku.ctrls.NotificationController.untreatedNotificationOfTeam(teamId, page: Int ?= 0, pageSize: Int ?= 10)
PUT     /api/notifications/:id/accept                   fr.maif.otoroshi.daikoku.ctrls.NotificationController.acceptNotification(id)
PUT     /api/notifications/:id/reject                   fr.maif.otoroshi.daikoku.ctrls.NotificationController.rejectNotification(id)

GET     /api/teams/:teamId/_verify                      fr.maif.otoroshi.daikoku.ctrls.TeamController.verifyContactEmail(teamId)
PUT     /api/teams/:teamId/_sendEmail                   fr.maif.otoroshi.daikoku.ctrls.TeamController.sendEmailVerification(teamId )

POST    /api/oidc/_fetchConfig                          fr.maif.otoroshi.daikoku.ctrls.TenantController.fetchOpenIdConfiguration()
GET     /api/tenants/simplified                         fr.maif.otoroshi.daikoku.ctrls.TenantController.tenantList()
GET     /api/tenants/:id/_redirect                      fr.maif.otoroshi.daikoku.ctrls.TenantController.redirectToTenant(id)
POST    /api/tenants/:tenantId/_contact                 fr.maif.otoroshi.daikoku.ctrls.TenantController.contact(tenantId)
POST    /api/tenants/_names                             fr.maif.otoroshi.daikoku.ctrls.TenantController.namesOfTenants()
PUT     /api/tenants/:tenantId                          fr.maif.otoroshi.daikoku.ctrls.TenantController.saveTenant(tenantId)
GET     /api/tenants/:tenantId                          fr.maif.otoroshi.daikoku.ctrls.TenantController.oneTenant(tenantId)
DELETE  /api/tenants/:tenantId                          fr.maif.otoroshi.daikoku.ctrls.TenantController.deleteTenant(tenantId)
GET     /api/tenants                                    fr.maif.otoroshi.daikoku.ctrls.TenantController.allTenants()
POST    /api/tenants                                    fr.maif.otoroshi.daikoku.ctrls.TenantController.createTenant()
GET     /api/tenants/:tenantId/admins                   fr.maif.otoroshi.daikoku.ctrls.TenantController.admins(tenantId)
GET     /api/tenants/:tenantId/addable-admins           fr.maif.otoroshi.daikoku.ctrls.TenantController.addableAdmins(tenantId)
POST    /api/tenants/:tenantId/admins                   fr.maif.otoroshi.daikoku.ctrls.TenantController.addAdminsToTenant(tenantId)
DELETE  /api/tenants/:tenantId/admins/:adminId          fr.maif.otoroshi.daikoku.ctrls.TenantController.removeAdminFromTenant(tenantId, adminId)

GET     /api/translations/_all                          fr.maif.otoroshi.daikoku.ctrls.TranslationController.getAllTranslations()
GET     /api/translations/_mail                         fr.maif.otoroshi.daikoku.ctrls.TranslationController.getMailTranslations(domain: Option[String] ?= None)
GET     /api/translations/_languages                    fr.maif.otoroshi.daikoku.ctrls.TranslationController.getLanguages()
PUT     /api/translations                               fr.maif.otoroshi.daikoku.ctrls.TranslationController.saveTranslation()
POST    /api/translations/:translationId/_reset         fr.maif.otoroshi.daikoku.ctrls.TranslationController.resetTranslation(translationId: String)
DELETE  /api/translations                               fr.maif.otoroshi.daikoku.ctrls.TranslationController.deleteTranslation()

GET     /api/admin/users/:id/_impersonate               fr.maif.otoroshi.daikoku.ctrls.UsersController.impersonate(id)
GET     /api/me/_deimpersonate                          fr.maif.otoroshi.daikoku.ctrls.UsersController.deImpersonate()
GET     /api/admin/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UsersController.findUserById(id)
PUT     /api/admin/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UsersController.updateUserById(id)
PUT     /api/admin/users/:id/_admin                     fr.maif.otoroshi.daikoku.ctrls.UsersController.setAdminStatus(id)
DELETE  /api/admin/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UsersController.deleteUserById(id)
POST    /api/admin/users                                fr.maif.otoroshi.daikoku.ctrls.UsersController.createUser()
GET     /api/admin/users                                fr.maif.otoroshi.daikoku.ctrls.UsersController.allTenantUsers()
GET     /api/admin/auditTrail                           fr.maif.otoroshi.daikoku.ctrls.AuditTrailController.auditTrail()

DELETE  /api/admin/sessions/:id                         fr.maif.otoroshi.daikoku.ctrls.SessionController.deleteSession(id)
DELETE  /api/admin/sessions                             fr.maif.otoroshi.daikoku.ctrls.SessionController.deleteAllSessions()
GET     /api/admin/sessions                             fr.maif.otoroshi.daikoku.ctrls.SessionController.allSessions()
POST    /api/session/_renew                             fr.maif.otoroshi.daikoku.ctrls.SessionController.sessionRenew()

GET     /api/entities/tenant                            fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newTenant()
GET     /api/entities/team                              fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newTeam()
GET     /api/entities/api                               fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newApi()
GET     /api/entities/apigroup                          fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newApiGroup()
GET     /api/entities/user                              fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newUser()
GET     /api/entities/otoroshi                          fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newOtoroshi()
GET     /api/entities/issue                             fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newIssue()
GET     /api/entities/plan                              fr.maif.otoroshi.daikoku.ctrls.EntitiesController.newPlan(planType: String)

POST    /api/jobs/otoroshi/_sync                        fr.maif.otoroshi.daikoku.ctrls.JobsController.otoroshiSyncJob()
POST    /api/jobs/stats/_sync                           fr.maif.otoroshi.daikoku.ctrls.JobsController.apikeysStatsSyncJob()
POST    /api/jobs/purge/_sync                           fr.maif.otoroshi.daikoku.ctrls.JobsController.auditTrailPurgeRunJob()

POST    /api/_search                                    fr.maif.otoroshi.daikoku.ctrls.ApiController.search()

POST    /api/reset                                      fr.maif.otoroshi.daikoku.ctrls.MockController.reset()

GET     /api/state/export                               fr.maif.otoroshi.daikoku.ctrls.StateController.exportState()
POST    /api/state/import                               fr.maif.otoroshi.daikoku.ctrls.StateController.importState()
POST    /api/state/migrate                              fr.maif.otoroshi.daikoku.ctrls.StateController.migrateStateToPostgres()
POST    /api/state/lock                                 fr.maif.otoroshi.daikoku.ctrls.StateController.enableMaintenanceMode()
POST    /api/state/unlock                               fr.maif.otoroshi.daikoku.ctrls.StateController.disableMaintenanceMode()
GET     /api/state/lock                                 fr.maif.otoroshi.daikoku.ctrls.StateController.isMaintenanceMode()

POST     /api/search                                    fr.maif.otoroshi.daikoku.ctrls.GraphQLController.search()
GET     /api/render-schema                              fr.maif.otoroshi.daikoku.ctrls.GraphQLController.renderSchema()

GET     /fakeotoroshi/api/stats                      fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiStats(from: String, to: String, apikey: String)
GET     /fakeotoroshi/api/apikeys/:clientId/quotas   fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiQuotas(clientId)
GET     /fakeotoroshi/api/apikeys/:clientId          fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiApiKey(clientId)
PUT     /fakeotoroshi/api/apikeys/:clientId          fr.maif.otoroshi.daikoku.ctrls.MockController.updateFakeOtoroshiApiKey(clientId)
DELETE  /fakeotoroshi/api/apikeys/:clientId          fr.maif.otoroshi.daikoku.ctrls.MockController.deleteFakeOtoroshiApiKey(clientId)
PUT		  /fakeotoroshi/api/apikeys/:clientId          fr.maif.otoroshi.daikoku.ctrls.MockController.updateFakeOtoroshiApiKey(clientId)
POST    /fakeotoroshi/api/apikeys                    fr.maif.otoroshi.daikoku.ctrls.MockController.createFakeOtoroshiApiKey()
GET     /fakeotoroshi/api/apikeys                    fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiApiKeys()
GET     /fakeotoroshi/api/groups/:groupId            fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiGroup(groupId)
GET     /fakeotoroshi/api/groups                     fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiGroups()
GET     /fakeotoroshi/api/services                   fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiServices()
GET     /fakeotoroshi/api/routes                     fr.maif.otoroshi.daikoku.ctrls.MockController.fakeOtoroshiRoutes()

GET     /admin-api/swagger.json                      fr.maif.otoroshi.daikoku.ctrls.AdminApiSwaggerController.swagger()


###
#  summary: read the full content of the datastore in nd-json format
#  tags:
#    - Import / Export
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            type: object
###
GET     /admin-api/state/export                         fr.maif.otoroshi.daikoku.ctrls.StateAdminApiController.exportState()

###
#  summary: insert the full content of the datastore from nd-json format
#  tags:
#    - Import / Export
#  requestBody:
#    description: Datastore content
#    required: true
#    content:
#      application/nd-json:
#        schema:
#            type: object
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
POST    /admin-api/state/import                         fr.maif.otoroshi.daikoku.ctrls.StateAdminApiController.importState()

DELETE  /admin-api/tenants/:id                          fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.deleteEntity(id)
PATCH   /admin-api/tenants/:id                          fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.patchEntity(id)
PUT     /admin-api/tenants/:id                          fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.updateEntity(id)

GET     /admin-api/tenants/:id                          fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.findById(id)
POST    /admin-api/tenants                              fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.createEntity()
GET     /admin-api/tenants                              fr.maif.otoroshi.daikoku.ctrls.TenantAdminApiController.findAll()

DELETE  /admin-api/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.deleteEntity(id)
PATCH   /admin-api/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.patchEntity(id)
PUT     /admin-api/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.updateEntity(id)
GET     /admin-api/users/:id                            fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.findById(id)
POST    /admin-api/users                                fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.createEntity()
GET     /admin-api/users                                fr.maif.otoroshi.daikoku.ctrls.UserAdminApiController.findAll()

DELETE  /admin-api/teams/:id                            fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.deleteEntity(id)
PATCH   /admin-api/teams/:id                            fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.patchEntity(id)
PUT     /admin-api/teams/:id                            fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.updateEntity(id)
GET     /admin-api/teams/:id                            fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.findById(id)
POST    /admin-api/teams                                fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.createEntity()
GET     /admin-api/teams                                fr.maif.otoroshi.daikoku.ctrls.TeamAdminApiController.findAll()

DELETE  /admin-api/apis/:id                             fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.deleteEntity(id)
PATCH   /admin-api/apis/:id                             fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.patchEntity(id)
PUT     /admin-api/apis/:id                             fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.updateEntity(id)
GET     /admin-api/apis/:id                             fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.findById(id)
POST    /admin-api/apis                                 fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.createEntity()
GET     /admin-api/apis                                 fr.maif.otoroshi.daikoku.ctrls.ApiAdminApiController.findAll()

DELETE  /admin-api/subscriptions/:id                    fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.deleteEntity(id)
PATCH   /admin-api/subscriptions/:id                    fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.patchEntity(id)
PUT     /admin-api/subscriptions/:id                    fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.updateEntity(id)
GET     /admin-api/subscriptions/:id                    fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.findById(id)
POST    /admin-api/subscriptions                        fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.createEntity()
GET     /admin-api/subscriptions                        fr.maif.otoroshi.daikoku.ctrls.ApiSubscriptionAdminApiController.findAll()

DELETE  /admin-api/pages/:id                            fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.deleteEntity(id)
PATCH   /admin-api/pages/:id                            fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.patchEntity(id)
PUT     /admin-api/pages/:id                            fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.updateEntity(id)
GET     /admin-api/pages/:id                            fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.findById(id)
POST    /admin-api/pages                                fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.createEntity()
GET     /admin-api/pages                                fr.maif.otoroshi.daikoku.ctrls.ApiDocumentationPageAdminApiController.findAll()

DELETE  /admin-api/notifications/:id                    fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.deleteEntity(id)
PATCH   /admin-api/notifications/:id                    fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.patchEntity(id)
PUT     /admin-api/notifications/:id                    fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.updateEntity(id)
GET     /admin-api/notifications/:id                    fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.findById(id)
POST    /admin-api/notifications                        fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.createEntity()
GET     /admin-api/notifications                        fr.maif.otoroshi.daikoku.ctrls.NotificationAdminApiController.findAll()

DELETE  /admin-api/sessions/:id                         fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.deleteEntity(id)
PATCH   /admin-api/sessions/:id                         fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.patchEntity(id)
PUT     /admin-api/sessions/:id                         fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.updateEntity(id)
GET     /admin-api/sessions/:id                         fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.findById(id)
POST    /admin-api/sessions                             fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.createEntity()
GET     /admin-api/sessions                             fr.maif.otoroshi.daikoku.ctrls.UserSessionAdminApiController.findAll()

DELETE  /admin-api/consumptions/:id                     fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.deleteEntity(id)
PATCH   /admin-api/consumptions/:id                     fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.patchEntity(id)
PUT     /admin-api/consumptions/:id                     fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.updateEntity(id)
GET     /admin-api/consumptions/:id                     fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.findById(id)
POST    /admin-api/consumptions                         fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.createEntity()
GET     /admin-api/consumptions                         fr.maif.otoroshi.daikoku.ctrls.ApiKeyConsumptionAdminApiController.findAll()

DELETE  /admin-api/audit-events/:id                     fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.deleteEntity(id)
PATCH   /admin-api/audit-events/:id                     fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.patchEntity(id)
PUT     /admin-api/audit-events/:id                     fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.updateEntity(id)
GET     /admin-api/audit-events/:id                     fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.findById(id)
POST    /admin-api/audit-events                         fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.createEntity()
GET     /admin-api/audit-events                         fr.maif.otoroshi.daikoku.ctrls.AuditEventAdminApiController.findAll()

DELETE  /admin-api/message/:id                          fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.deleteEntity(id)
PATCH   /admin-api/message/:id                          fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.patchEntity(id)
PUT     /admin-api/message/:id                          fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.updateEntity(id)
GET     /admin-api/message/:id                          fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.findById(id)
POST    /admin-api/message                              fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.createEntity()
GET     /admin-api/message                              fr.maif.otoroshi.daikoku.ctrls.MessagesAdminApiController.findAll()

DELETE  /admin-api/posts/:id                            fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.deleteEntity(id)
PATCH   /admin-api/posts/:id                            fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.patchEntity(id)
PUT     /admin-api/posts/:id                            fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.updateEntity(id)
GET     /admin-api/posts/:id                            fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.findById(id)
POST    /admin-api/posts                                fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.createEntity()
GET     /admin-api/posts                                fr.maif.otoroshi.daikoku.ctrls.PostsAdminApiController.findAll()

DELETE  /admin-api/cms-pages/:id                        fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.deleteEntity(id)
PATCH   /admin-api/cms-pages/:id                        fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.patchEntity(id)
PUT     /admin-api/cms-pages/:id                        fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.updateEntity(id)
GET     /admin-api/cms-pages/:id                        fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.findById(id)
POST    /admin-api/cms-pages                            fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.createEntity()
GET     /admin-api/cms-pages                            fr.maif.otoroshi.daikoku.ctrls.CmsPagesAdminApiController.findAll()

DELETE  /admin-api/issues/:id                           fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.deleteEntity(id)
PATCH   /admin-api/issues/:id                           fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.patchEntity(id)
PUT     /admin-api/issues/:id                           fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.updateEntity(id)
GET     /admin-api/issues/:id                           fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.findById(id)
POST    /admin-api/issues                               fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.createEntity()
GET     /admin-api/issues                               fr.maif.otoroshi.daikoku.ctrls.IssuesAdminApiController.findAll()

DELETE  /admin-api/translations/:id                     fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.deleteEntity(id)
PATCH   /admin-api/translations/:id                     fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.patchEntity(id)
PUT     /admin-api/translations/:id                     fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.updateEntity(id)
GET     /admin-api/translations/:id                     fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.findById(id)
POST    /admin-api/translations                         fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.createEntity()
GET     /admin-api/translations                         fr.maif.otoroshi.daikoku.ctrls.TranslationsAdminApiController.findAll()
###
#  summary: get apikey from integration token
#  tags:
#    - Integration ApiKey
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
#            items:
#              $ref: '#/components/schemas/fr.maif.otoroshi.daikoku.domain.OtoroshiApiKey'
###
GET     /admin-api/credentials/:token                   fr.maif.otoroshi.daikoku.ctrls.CredentialsAdminApiController.getCredentials(token)

POST     /admin-api/search                               fr.maif.otoroshi.daikoku.ctrls.GraphQLController.adminApiSearch()
GET      /admin-api/schema                               fr.maif.otoroshi.daikoku.ctrls.GraphQLController.adminApiSchema()


GET     /integration-api/apis                           fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.findAll()
GET     /integration-api/:teamId                        fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.findAllTeam(teamId)
GET     /integration-api/:teamId/:apiId/complete        fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.apiComplete(teamId, apiId)
GET     /integration-api/:teamId/:apiId/description     fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.apiDescription(teamId, apiId)
GET     /integration-api/:teamId/:apiId/plans           fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.apiPlans(teamId, apiId)
GET     /integration-api/:teamId/:apiId/documentation   fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.apiDocumentation(teamId, apiId)
GET     /integration-api/:teamId/:apiId/apidoc          fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.apiSwagger(teamId, apiId)
GET     /integration-api/:teamId/:apiId                 fr.maif.otoroshi.daikoku.ctrls.IntegrationApiController.api(teamId, apiId)

### NoDocs ###
GET     /*path                      fr.maif.otoroshi.daikoku.ctrls.HomeController.indexWithPath(path)

